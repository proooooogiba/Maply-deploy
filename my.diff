diff --git a/.rspec b/.rspec
new file mode 100644
index 0000000..c99d2e7
--- /dev/null
+++ b/.rspec
@@ -0,0 +1 @@
+--require spec_helper
diff --git a/Gemfile b/Gemfile
index 01fc8d8..1f8606f 100644
--- a/Gemfile
+++ b/Gemfile
@@ -1,34 +1,37 @@
-source "https://rubygems.org"
+# frozen_string_literal: true
+
+source 'https://rubygems.org'
 git_source(:github) { |repo| "https://github.com/#{repo}.git" }
 
-ruby "3.0.4"
+ruby '3.0.4'
 
 # Bundle edge Rails instead: gem "rails", github: "rails/rails", branch: "main"
-gem "rails", "~> 7.0.4"
+gem 'rails', '~> 7.0.4'
 
 # The original asset pipeline for Rails [https://github.com/rails/sprockets-rails]
-gem "sprockets-rails"
+gem 'sprockets-rails'
 
 # Use sqlite3 as the database for Active Record
-gem "sqlite3", "~> 1.4"
+gem 'sqlite3', '~> 1.4'
 
+gem 'devise'
 # Use the Puma web server [https://github.com/puma/puma]
-gem "puma", "~> 5.0"
+gem 'puma', '~> 5.0'
 
 # Use JavaScript with ESM import maps [https://github.com/rails/importmap-rails]
-gem "importmap-rails"
+gem 'importmap-rails'
 
 # Hotwire's SPA-like page accelerator [https://turbo.hotwired.dev]
-gem "turbo-rails"
+gem 'turbo-rails'
 
 # Hotwire's modest JavaScript framework [https://stimulus.hotwired.dev]
-gem "stimulus-rails"
+gem 'stimulus-rails'
 
 # Build JSON APIs with ease [https://github.com/rails/jbuilder]
-gem "jbuilder"
+gem 'jbuilder'
 
 # Use Redis adapter to run Action Cable in production
-# gem "redis", "~> 4.0"
+gem 'redis', '~> 4.0'
 
 # Use Kredis to get higher-level data types in Redis [https://github.com/rails/kredis]
 # gem "kredis"
@@ -37,25 +40,26 @@ gem "jbuilder"
 # gem "bcrypt", "~> 3.1.7"
 
 # Windows does not include zoneinfo files, so bundle the tzinfo-data gem
-gem "tzinfo-data", platforms: %i[ mingw mswin x64_mingw jruby ]
+gem 'tzinfo-data', platforms: %i[mingw mswin x64_mingw jruby]
 
 # Reduces boot times through caching; required in config/boot.rb
-gem "bootsnap", require: false
+gem 'bootsnap', require: false
 
 # Use Sass to process CSS
 # gem "sassc-rails"
 
 # Use Active Storage variants [https://guides.rubyonrails.org/active_storage_overview.html#transforming-images]
-# gem "image_processing", "~> 1.2"
+gem 'image_processing', '~> 1.2'
 
 group :development, :test do
   # See https://guides.rubyonrails.org/debugging_rails_applications.html#debugging-with-the-debug-gem
-  gem "debug", platforms: %i[ mri mingw x64_mingw ]
+  gem 'debug', platforms: %i[mri mingw x64_mingw]
+  gem 'rspec-rails', '~> 6.0.0'
 end
 
 group :development do
   # Use console on exceptions pages [https://github.com/rails/web-console]
-  gem "web-console"
+  gem 'web-console'
 
   # Add speed badges [https://github.com/MiniProfiler/rack-mini-profiler]
   # gem "rack-mini-profiler"
@@ -66,7 +70,19 @@ end
 
 group :test do
   # Use system testing [https://guides.rubyonrails.org/testing.html#system-testing]
-  gem "capybara"
-  gem "selenium-webdriver"
-  gem "webdrivers"
+  gem 'capybara'
+  gem 'faker'
+  gem 'rails-controller-testing'
+  gem 'selenium-webdriver'
+  gem 'shoulda-matchers'
+  gem 'webdrivers'
 end
+
+gem 'followability', github: 'nejdetkadir/followability', branch: 'main'
+gem 'geocoder'
+gem 'omniauth'
+gem 'omniauth-github', github: 'omniauth/omniauth-github', branch: 'master'
+gem 'omniauth-google-oauth2'
+gem 'omniauth-rails_csrf_protection', '~> 1.0'
+gem 'omniauth-vkontakte'
+gem 'rails-i18n'
diff --git a/Gemfile.lock b/Gemfile.lock
index 772439b..b157eed 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -1,3 +1,19 @@
+GIT
+  remote: https://github.com/nejdetkadir/followability.git
+  revision: 20819c924271bd74bcd5df845729c9a2906085f6
+  branch: main
+  specs:
+    followability (1.1.1)
+
+GIT
+  remote: https://github.com/omniauth/omniauth-github.git
+  revision: 0ac46b59ccdabd4cbe5be4a665df269355081915
+  branch: master
+  specs:
+    omniauth-github (2.0.1)
+      omniauth (~> 2.0)
+      omniauth-oauth2 (~> 1.8)
+
 GEM
   remote: https://rubygems.org/
   specs:
@@ -68,6 +84,7 @@ GEM
       tzinfo (~> 2.0)
     addressable (2.8.1)
       public_suffix (>= 2.0.2, < 6.0)
+    bcrypt (3.1.18)
     bindex (0.8.1)
     bootsnap (1.15.0)
       msgpack (~> 1.2)
@@ -83,25 +100,45 @@ GEM
       xpath (~> 3.2)
     concurrent-ruby (1.1.10)
     crass (1.0.6)
-    date (3.3.1)
+    date (3.3.3)
     debug (1.7.0)
       irb (>= 1.5.0)
       reline (>= 0.3.1)
+    devise (4.8.1)
+      bcrypt (~> 3.0)
+      orm_adapter (~> 0.1)
+      railties (>= 4.1.0)
+      responders
+      warden (~> 1.2.3)
+    diff-lcs (1.5.0)
     erubi (1.11.0)
+    faker (3.0.0)
+      i18n (>= 1.8.11, < 2)
+    faraday (2.7.2)
+      faraday-net_http (>= 2.0, < 3.1)
+      ruby2_keywords (>= 0.0.4)
+    faraday-net_http (3.0.2)
+    ffi (1.15.5)
+    geocoder (1.8.1)
     globalid (1.0.0)
       activesupport (>= 5.0)
+    hashie (5.0.0)
     i18n (1.12.0)
       concurrent-ruby (~> 1.0)
+    image_processing (1.12.2)
+      mini_magick (>= 4.9.5, < 5)
+      ruby-vips (>= 2.0.17, < 3)
     importmap-rails (1.1.5)
       actionpack (>= 6.0.0)
       railties (>= 6.0.0)
-    io-console (0.5.11)
-    irb (1.6.0)
+    io-console (0.6.0)
+    irb (1.6.1)
       reline (>= 0.3.0)
     jbuilder (2.11.5)
       actionview (>= 5.0.0)
       activesupport (>= 5.0.0)
-    loofah (2.19.0)
+    jwt (2.5.0)
+    loofah (2.19.1)
       crass (~> 1.0.2)
       nokogiri (>= 1.5.9)
     mail (2.8.0)
@@ -112,9 +149,11 @@ GEM
     marcel (1.0.2)
     matrix (0.4.2)
     method_source (1.0.0)
+    mini_magick (4.12.0)
     mini_mime (1.1.2)
     minitest (5.16.3)
     msgpack (1.6.0)
+    multi_xml (0.6.0)
     net-imap (0.3.2)
       date
       net-protocol
@@ -127,11 +166,38 @@ GEM
     nio4r (2.5.8)
     nokogiri (1.13.10-x86_64-linux)
       racc (~> 1.4)
+    oauth2 (2.0.9)
+      faraday (>= 0.17.3, < 3.0)
+      jwt (>= 1.0, < 3.0)
+      multi_xml (~> 0.5)
+      rack (>= 1.2, < 4)
+      snaky_hash (~> 2.0)
+      version_gem (~> 1.1)
+    omniauth (2.1.0)
+      hashie (>= 3.4.6)
+      rack (>= 2.2.3)
+      rack-protection
+    omniauth-google-oauth2 (1.1.1)
+      jwt (>= 2.0)
+      oauth2 (~> 2.0.6)
+      omniauth (~> 2.0)
+      omniauth-oauth2 (~> 1.8.0)
+    omniauth-oauth2 (1.8.0)
+      oauth2 (>= 1.4, < 3)
+      omniauth (~> 2.0)
+    omniauth-rails_csrf_protection (1.0.1)
+      actionpack (>= 4.2)
+      omniauth (~> 2.0)
+    omniauth-vkontakte (1.8.0)
+      omniauth-oauth2 (>= 1.5, <= 1.8.0)
+    orm_adapter (0.5.0)
     public_suffix (5.0.1)
     puma (5.6.5)
       nio4r (~> 2.0)
     racc (1.6.1)
     rack (2.2.4)
+    rack-protection (3.0.5)
+      rack
     rack-test (2.0.2)
       rack (>= 1.3)
     rails (7.0.4)
@@ -148,11 +214,18 @@ GEM
       activesupport (= 7.0.4)
       bundler (>= 1.15.0)
       railties (= 7.0.4)
+    rails-controller-testing (1.0.5)
+      actionpack (>= 5.0.1.rc1)
+      actionview (>= 5.0.1.rc1)
+      activesupport (>= 5.0.1.rc1)
     rails-dom-testing (2.0.3)
       activesupport (>= 4.2.0)
       nokogiri (>= 1.6)
-    rails-html-sanitizer (1.4.3)
-      loofah (~> 2.3)
+    rails-html-sanitizer (1.4.4)
+      loofah (~> 2.19, >= 2.19.1)
+    rails-i18n (7.0.6)
+      i18n (>= 0.7, < 2)
+      railties (>= 6.0.0, < 8)
     railties (7.0.4)
       actionpack (= 7.0.4)
       activesupport (= 7.0.4)
@@ -161,15 +234,44 @@ GEM
       thor (~> 1.0)
       zeitwerk (~> 2.5)
     rake (13.0.6)
+    redis (4.8.0)
     regexp_parser (2.6.1)
-    reline (0.3.1)
+    reline (0.3.2)
       io-console (~> 0.5)
+    responders (3.0.1)
+      actionpack (>= 5.0)
+      railties (>= 5.0)
     rexml (3.2.5)
+    rspec-core (3.12.0)
+      rspec-support (~> 3.12.0)
+    rspec-expectations (3.12.1)
+      diff-lcs (>= 1.2.0, < 2.0)
+      rspec-support (~> 3.12.0)
+    rspec-mocks (3.12.1)
+      diff-lcs (>= 1.2.0, < 2.0)
+      rspec-support (~> 3.12.0)
+    rspec-rails (6.0.1)
+      actionpack (>= 6.1)
+      activesupport (>= 6.1)
+      railties (>= 6.1)
+      rspec-core (~> 3.11)
+      rspec-expectations (~> 3.11)
+      rspec-mocks (~> 3.11)
+      rspec-support (~> 3.11)
+    rspec-support (3.12.0)
+    ruby-vips (2.1.4)
+      ffi (~> 1.12)
+    ruby2_keywords (0.0.5)
     rubyzip (2.3.2)
     selenium-webdriver (4.7.1)
       rexml (~> 3.2, >= 3.2.5)
       rubyzip (>= 1.2.2, < 3.0)
       websocket (~> 1.0)
+    shoulda-matchers (5.3.0)
+      activesupport (>= 5.2.0)
+    snaky_hash (2.0.1)
+      hashie
+      version_gem (~> 1.1, >= 1.1.1)
     sprockets (4.1.1)
       concurrent-ruby (~> 1.0)
       rack (> 1, < 3)
@@ -188,6 +290,9 @@ GEM
       railties (>= 6.0.0)
     tzinfo (2.0.5)
       concurrent-ruby (~> 1.0)
+    version_gem (1.1.1)
+    warden (1.2.9)
+      rack (>= 2.0.9)
     web-console (4.2.0)
       actionview (>= 6.0.0)
       activemodel (>= 6.0.0)
@@ -212,11 +317,26 @@ DEPENDENCIES
   bootsnap
   capybara
   debug
+  devise
+  faker
+  followability!
+  geocoder
+  image_processing (~> 1.2)
   importmap-rails
   jbuilder
+  omniauth
+  omniauth-github!
+  omniauth-google-oauth2
+  omniauth-rails_csrf_protection (~> 1.0)
+  omniauth-vkontakte
   puma (~> 5.0)
   rails (~> 7.0.4)
+  rails-controller-testing
+  rails-i18n
+  redis (~> 4.0)
+  rspec-rails (~> 6.0.0)
   selenium-webdriver
+  shoulda-matchers
   sprockets-rails
   sqlite3 (~> 1.4)
   stimulus-rails
diff --git a/Rakefile b/Rakefile
index 9a5ea73..488c551 100644
--- a/Rakefile
+++ b/Rakefile
@@ -1,6 +1,8 @@
+# frozen_string_literal: true
+
 # Add your own tasks in files placed in lib/tasks ending in .rake,
 # for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.
 
-require_relative "config/application"
+require_relative 'config/application'
 
 Rails.application.load_tasks
diff --git a/app/assets/images/Yandex_icon.png b/app/assets/images/Yandex_icon.png
new file mode 100644
index 0000000..f134580
Binary files /dev/null and b/app/assets/images/Yandex_icon.png differ
diff --git a/app/assets/images/btn_google_signin_dark_disabled_web.png b/app/assets/images/btn_google_signin_dark_disabled_web.png
new file mode 100644
index 0000000..735d17e
Binary files /dev/null and b/app/assets/images/btn_google_signin_dark_disabled_web.png differ
diff --git a/app/assets/images/btn_google_signin_dark_focus_web.png b/app/assets/images/btn_google_signin_dark_focus_web.png
new file mode 100644
index 0000000..c4cb615
Binary files /dev/null and b/app/assets/images/btn_google_signin_dark_focus_web.png differ
diff --git a/app/assets/images/btn_google_signin_dark_normal_web.png b/app/assets/images/btn_google_signin_dark_normal_web.png
new file mode 100644
index 0000000..b1327b4
Binary files /dev/null and b/app/assets/images/btn_google_signin_dark_normal_web.png differ
diff --git a/app/assets/images/btn_google_signin_dark_pressed_web.png b/app/assets/images/btn_google_signin_dark_pressed_web.png
new file mode 100644
index 0000000..04ed9c9
Binary files /dev/null and b/app/assets/images/btn_google_signin_dark_pressed_web.png differ
diff --git a/app/assets/images/btn_google_signin_light_disabled_web.png b/app/assets/images/btn_google_signin_light_disabled_web.png
new file mode 100644
index 0000000..735d17e
Binary files /dev/null and b/app/assets/images/btn_google_signin_light_disabled_web.png differ
diff --git a/app/assets/images/btn_google_signin_light_focus_web.png b/app/assets/images/btn_google_signin_light_focus_web.png
new file mode 100644
index 0000000..1bf1006
Binary files /dev/null and b/app/assets/images/btn_google_signin_light_focus_web.png differ
diff --git a/app/assets/images/btn_google_signin_light_pressed_web.png b/app/assets/images/btn_google_signin_light_pressed_web.png
new file mode 100644
index 0000000..e286c89
Binary files /dev/null and b/app/assets/images/btn_google_signin_light_pressed_web.png differ
diff --git a/app/assets/images/github.png b/app/assets/images/github.png
new file mode 100644
index 0000000..8b984e3
Binary files /dev/null and b/app/assets/images/github.png differ
diff --git a/app/assets/images/google_oauth2.png b/app/assets/images/google_oauth2.png
new file mode 100644
index 0000000..bdb9f61
Binary files /dev/null and b/app/assets/images/google_oauth2.png differ
diff --git a/app/assets/images/no-photo.png b/app/assets/images/no-photo.png
new file mode 100644
index 0000000..7640e01
Binary files /dev/null and b/app/assets/images/no-photo.png differ
diff --git a/app/assets/images/no_photo.jpg b/app/assets/images/no_photo.jpg
new file mode 100644
index 0000000..9b1d3b2
Binary files /dev/null and b/app/assets/images/no_photo.jpg differ
diff --git a/app/assets/images/telegram.png b/app/assets/images/telegram.png
new file mode 100644
index 0000000..2192091
Binary files /dev/null and b/app/assets/images/telegram.png differ
diff --git a/app/assets/images/vkontakte.png b/app/assets/images/vkontakte.png
new file mode 100644
index 0000000..19a77bf
Binary files /dev/null and b/app/assets/images/vkontakte.png differ
diff --git a/app/assets/stylesheets/application.css b/app/assets/stylesheets/application.css
index 8b517a1..bb4d5f6 100644
--- a/app/assets/stylesheets/application.css
+++ b/app/assets/stylesheets/application.css
@@ -12,15 +12,6 @@
  *
  *= require_tree .
  *= require_self
- */
-
-/* html, body {
-    width: 100%;
-    height: 100%;
-    margin: 0;
-    padding: 0;
-} */
-
 
 /* Единственный минус это противоречит условиям соглашения использования api */
 /* [class*="ymaps-2"][class*="-ground-pane"] {
@@ -35,21 +26,126 @@
 	opacity: 1;
 } */
 
-html, body, .container, .row {
+html,
+body {
     height: 100%;
     width: 100%;
     padding: 0;
     margin: 0;
 }
 
+.row {
+    height: 95%;
+    width: 100%;
+    margin: 0;
+    padding: 0;
+}
+
 .map {
     width: 100%;
     height: 100%;
 }
 
-/* .navigation {
-    float: right;
-    width: 15%;
-    height: 100%;
-    background-color: #af525261;
-} */
+.msg-form {
+    width: 100%;
+    height: 56px;
+    padding: 10px;
+}
+
+.formBtn {
+    width: 100%;
+}
+
+#single_room {
+    height: calc(100vh - 150px);
+}
+
+#messages {
+    height: calc(100vh - 150px);
+    overflow-x: hidden;
+    overflow-y: scroll;
+}
+
+#room_container {
+    height: 100vh;
+    margin-right: 0px !important;
+}
+
+#side_panel {
+    height: 100vh;
+    margin-right: 0px !important;
+    overflow-x: hidden;
+    overflow-y: scroll;
+    margin-bottom: 55px;
+}
+
+#chatroom_container {
+    height: 100vh;
+    margin-right: 0px !important;
+    overflow-x: hidden;
+    overflow-y: hidden;
+}
+
+
+.login-wrapper {
+    
+}
+
+
+.msg-content {
+    width: 80%;
+    margin-right: 5px;
+}
+
+.message-box {
+    word-wrap: break-word;
+    width: fit-content;
+    max-width: 40%;
+    padding: 5px;
+    border-radius: 10px;
+    margin-bottom: 10px;
+    background-color: #555555;
+    padding: 10px;
+}
+
+.user_row {
+    height: 50px;
+    padding: 10px;
+    border-bottom: 1px solid #555555;
+}
+
+.username {
+    overflow: hidden;
+}
+
+.chat_pfp {
+    width: 40px;
+    height: 40px;
+    border-radius: 50%;
+    margin-right: 10px;
+}
+
+.user_list_item {
+    height: 55px;
+    background-color: #343a40 !important;
+}
+
+.room_list_item {
+    height: 55px;
+    background-color: #343a40 !important;
+    color: #fff;
+}
+
+.name {
+    margin-top: 15px;
+    padding-bottom: 0px;
+    margin-bottom: 0px;
+}
+
+.time {
+    padding-top: 0px;
+    margin-top: 0px;
+    padding-bottom: 0px;
+    margin-bottom: 0px;
+    color: #ffffff6e;
+}
\ No newline at end of file
diff --git a/app/channels/application_cable/channel.rb b/app/channels/application_cable/channel.rb
index d672697..9aec230 100644
--- a/app/channels/application_cable/channel.rb
+++ b/app/channels/application_cable/channel.rb
@@ -1,3 +1,5 @@
+# frozen_string_literal: true
+
 module ApplicationCable
   class Channel < ActionCable::Channel::Base
   end
diff --git a/app/channels/application_cable/connection.rb b/app/channels/application_cable/connection.rb
index 0ff5442..8d6c2a1 100644
--- a/app/channels/application_cable/connection.rb
+++ b/app/channels/application_cable/connection.rb
@@ -1,3 +1,5 @@
+# frozen_string_literal: true
+
 module ApplicationCable
   class Connection < ActionCable::Connection::Base
   end
diff --git a/app/controllers/application_controller.rb b/app/controllers/application_controller.rb
index 09705d1..0e622da 100644
--- a/app/controllers/application_controller.rb
+++ b/app/controllers/application_controller.rb
@@ -1,2 +1,5 @@
+# frozen_string_literal: true
+
 class ApplicationController < ActionController::Base
+  protect_from_forgery with: :null_session
 end
diff --git a/app/controllers/maps_controller.rb b/app/controllers/maps_controller.rb
index a804286..095f563 100644
--- a/app/controllers/maps_controller.rb
+++ b/app/controllers/maps_controller.rb
@@ -1,2 +1,36 @@
+# frozen_string_literal: true
+
 class MapsController < ApplicationController
+  before_action :authenticate_user!
+  include MapsHelper
+
+  def index
+    @users = User.all_except(current_user).search(params)
+  end
+
+  def find_nearest
+    @users = sort_by_distance_all(current_user)
+    @nearest_person = @users.first
+  end
+
+  def find_nearest_friend
+    redirect_to root_path if current_user.followers.nil?
+    @users = sort_by_distance_followers(current_user)
+    @nearest_friend = @users.first
+  end
+
+  def result
+    @latitude = params[:latitude]
+    @longitude = params[:longitude]
+    @user = current_user
+    @user.latitude = @latitude
+    @user.longitude = @longitude
+    @user.save
+  end
+
+  private
+
+  def authenticate_user!
+    redirect_to new_user_session_path unless user_signed_in?
+  end
 end
diff --git a/app/controllers/messages_controller.rb b/app/controllers/messages_controller.rb
new file mode 100644
index 0000000..d243138
--- /dev/null
+++ b/app/controllers/messages_controller.rb
@@ -0,0 +1,15 @@
+# frozen_string_literal: true
+
+class MessagesController < ApplicationController
+  before_action :authenticate_user!
+
+  def create
+    @message = current_user.messages.create(body: msg_params[:body], room_id: params[:room_id])
+  end
+
+  private
+
+  def msg_params
+    params.require(:message).permit(:body)
+  end
+end
diff --git a/app/controllers/rooms_controller.rb b/app/controllers/rooms_controller.rb
new file mode 100644
index 0000000..bdf8a6f
--- /dev/null
+++ b/app/controllers/rooms_controller.rb
@@ -0,0 +1,29 @@
+# frozen_string_literal: true
+
+class RoomsController < ApplicationController
+  before_action :authenticate_user!
+
+  def index
+    @room = Room.new
+    @rooms = Room.public_rooms
+
+    @users = current_user.followers
+    render 'index'
+  end
+
+  def show
+    @single_room = Room.find(params[:id])
+    @room = Room.new
+    @rooms = Room.public_rooms
+
+    @message = Message.new
+    @messages = @single_room.messages.order(created_at: :asc)
+
+    @users = current_user.followers
+    render 'index'
+  end
+
+  def create
+    @room = Room.create(name: params[:room][:name])
+  end
+end
diff --git a/app/controllers/turbo_devise_controller.rb b/app/controllers/turbo_devise_controller.rb
new file mode 100644
index 0000000..ab20ad7
--- /dev/null
+++ b/app/controllers/turbo_devise_controller.rb
@@ -0,0 +1,20 @@
+# frozen_string_literal: true
+
+class TurboDeviseController < ApplicationController
+  class Responder < ActionController::Responder
+    def to_turbo_stream
+      controller.render(options.merge(formats: :html))
+    rescue ActionView::MissingTemplate => e
+      if get?
+        raise e
+      elsif has_errors? && default_action
+        render rendering_options.merge(formats: :html, status: :unprocessable_entity)
+      else
+        redirect_to navigation_location
+      end
+    end
+  end
+
+  self.responder = Responder
+  respond_to :html, :turbo_stream
+end
diff --git a/app/controllers/users/confirmations_controller.rb b/app/controllers/users/confirmations_controller.rb
new file mode 100644
index 0000000..663f3f9
--- /dev/null
+++ b/app/controllers/users/confirmations_controller.rb
@@ -0,0 +1,32 @@
+# frozen_string_literal: true
+
+module Users
+  class ConfirmationsController < Devise::ConfirmationsController
+    # GET /resource/confirmation/new
+    # def new
+    #   super
+    # end
+
+    # POST /resource/confirmation
+    # def create
+    #   super
+    # end
+
+    # GET /resource/confirmation?confirmation_token=abcdef
+    # def show
+    #   super
+    # end
+
+    # protected
+
+    # The path used after resending confirmation instructions.
+    # def after_resending_confirmation_instructions_path_for(resource_name)
+    #   super(resource_name)
+    # end
+
+    # The path used after confirmation.
+    # def after_confirmation_path_for(resource_name, resource)
+    #   super(resource_name, resource)
+    # end
+  end
+end
diff --git a/app/controllers/users/omniauth_callbacks_controller.rb b/app/controllers/users/omniauth_callbacks_controller.rb
new file mode 100644
index 0000000..7e55c79
--- /dev/null
+++ b/app/controllers/users/omniauth_callbacks_controller.rb
@@ -0,0 +1,62 @@
+# frozen_string_literal: true
+
+module Users
+  class OmniauthCallbacksController < Devise::OmniauthCallbacksController
+    # You should configure your model like this:
+    # devise :omniauthable, omniauth_providers: [:twitter]
+
+    # You should also create an action method in this controller like this:
+    # def twitter
+    # end
+
+    def google_oauth2
+      user = User.from_omniauth(auth)
+      if user.present?
+        sign_out_all_scopes
+        flash[:success] = t 'devise.omniauth_callbacks.success', kind: 'Google'
+        sign_in_and_redirect user, event: :authentication # this will throw if @user is not activated
+      else
+        flash[:alert] =
+          t 'devise.omniauth_callbacks.failure', kind: 'Google', reason: user.errors.full_messages.to_sentence.to_s
+        redirect_to new_user_session_path
+      end
+    end
+
+    def github
+      user = User.from_omniauth_github(request.env['omniauth.auth'])
+
+      if user.persisted?
+        flash[:notice] = I18n.t 'devise.omniauth_callbacks.success', kind: 'Github'
+        sign_in_and_redirect user, event: :authentication
+      else
+        session['devise.github_data'] = request.env['omniauth.auth'].except('extra') # Removing extra as it can overflow some session stores
+        redirect_to new_user_session_path, alert: user.errors.full_messages.join("\n")
+      end
+    end
+
+    # More info at:
+    # https://github.com/heartcombo/devise#omniauth
+
+    # GET|POST /resource/auth/twitter
+    # def passthru
+    #   super
+    # end
+
+    # GET|POST /users/auth/twitter/callback
+    # def failure
+    #   super
+    # end
+
+    # protected
+
+    # The path used when OmniAuth fails
+    # def after_omniauth_failure_path_for(scope)
+    #   super(scope)
+    # end
+    private
+
+    def auth
+      @auth ||= request.env['omniauth.auth']
+    end
+  end
+end
diff --git a/app/controllers/users/passwords_controller.rb b/app/controllers/users/passwords_controller.rb
new file mode 100644
index 0000000..23b84f9
--- /dev/null
+++ b/app/controllers/users/passwords_controller.rb
@@ -0,0 +1,36 @@
+# frozen_string_literal: true
+
+module Users
+  class PasswordsController < Devise::PasswordsController
+    # GET /resource/password/new
+    # def new
+    #   super
+    # end
+
+    # POST /resource/password
+    # def create
+    #   super
+    # end
+
+    # GET /resource/password/edit?reset_password_token=abcdef
+    # def edit
+    #   super
+    # end
+
+    # PUT /resource/password
+    # def update
+    #   super
+    # end
+
+    # protected
+
+    # def after_resetting_password_path_for(resource)
+    #   super(resource)
+    # end
+
+    # The path used after sending reset password instructions
+    # def after_sending_reset_password_instructions_path_for(resource_name)
+    #   super(resource_name)
+    # end
+  end
+end
diff --git a/app/controllers/users/registrations_controller.rb b/app/controllers/users/registrations_controller.rb
new file mode 100644
index 0000000..8ba2672
--- /dev/null
+++ b/app/controllers/users/registrations_controller.rb
@@ -0,0 +1,75 @@
+# frozen_string_literal: true
+
+module Users
+  class RegistrationsController < Devise::RegistrationsController
+    before_action :configure_sign_up_params, only: [:create]
+    before_action :configure_account_update_params, only: [:update]
+
+    # GET /resource/sign_up
+    # def new
+    #   super
+    # end
+
+    # POST /resource
+    # def create
+    #   super
+    # end
+
+    # GET /resource/edit
+    # def edit
+    #   super
+    # end
+
+    # PUT /resource
+    # def update
+    #   super
+    # end
+
+    # DELETE /resource
+    # def destroy
+    #   super
+    # end
+
+    # GET /resource/cancel
+    # Forces the session data which is usually expired after sign
+    # in to be expired now. This is useful if the user wants to
+    # cancel oauth signing in/up in the middle of the process,
+    # removing all OAuth session data.
+    # def cancel
+    #   super
+    # end
+
+    # protected
+
+    # If you have extra params to permit, append them to the sanitizer.
+    def configure_sign_up_params
+      devise_parameter_sanitizer.permit(:sign_up, keys: %i[avatar full_name])
+    end
+
+    # If you have extra params to permit, append them to the sanitizer.
+    def configure_account_update_params
+      devise_parameter_sanitizer.permit(:account_update, keys: %i[avatar full_name])
+    end
+
+    protected
+
+    def update_resource(resource, params)
+      if current_user.provider == 'google_oauth2' || current_user.provider == 'github'
+        params.delete('current_password')
+        resource.update_without_password(params)
+      else
+        resource.update_with_password(params)
+      end
+    end
+
+    # The path used after sign up.
+    # def after_sign_up_path_for(resource)
+    #   super(resource)
+    # end
+
+    # The path used after sign up for inactive accounts.
+    # def after_inactive_sign_up_path_for(resource)
+    #   super(resource)
+    # end
+  end
+end
diff --git a/app/controllers/users/sessions_controller.rb b/app/controllers/users/sessions_controller.rb
new file mode 100644
index 0000000..5dc49b0
--- /dev/null
+++ b/app/controllers/users/sessions_controller.rb
@@ -0,0 +1,37 @@
+# frozen_string_literal: true
+
+module Users
+  class SessionsController < Devise::SessionsController
+    # before_action :configure_sign_in_params, only: [:create]
+
+    # GET /resource/sign_in
+    # def new
+    #   super
+    # end
+
+    # POST /resource/sign_in
+    # def create
+    #   super
+    # end
+
+    # DELETE /resource/sign_out
+    # def destroy
+    #   super
+    # end
+
+    def after_sign_out_path_for(_resource_or_scope)
+      new_user_session_path
+    end
+
+    def after_sign_in_path_for(resource_or_scope)
+      stored_location_for(resource_or_scope) || root_path
+    end
+
+    # protected
+
+    # If you have extra params to permit, append them to the sanitizer.
+    # def configure_sign_in_params
+    #   devise_parameter_sanitizer.permit(:sign_in, keys: [:attribute])
+    # end
+  end
+end
diff --git a/app/controllers/users/unlocks_controller.rb b/app/controllers/users/unlocks_controller.rb
new file mode 100644
index 0000000..3301252
--- /dev/null
+++ b/app/controllers/users/unlocks_controller.rb
@@ -0,0 +1,32 @@
+# frozen_string_literal: true
+
+module Users
+  class UnlocksController < Devise::UnlocksController
+    # GET /resource/unlock/new
+    # def new
+    #   super
+    # end
+
+    # POST /resource/unlock
+    # def create
+    #   super
+    # end
+
+    # GET /resource/unlock?unlock_token=abcdef
+    # def show
+    #   super
+    # end
+
+    # protected
+
+    # The path used after sending unlock password instructions
+    # def after_sending_unlock_instructions_path_for(resource)
+    #   super(resource)
+    # end
+
+    # The path used after unlocking the resource
+    # def after_unlock_path_for(resource)
+    #   super(resource)
+    # end
+  end
+end
diff --git a/app/controllers/users_controller.rb b/app/controllers/users_controller.rb
new file mode 100644
index 0000000..2dd4637
--- /dev/null
+++ b/app/controllers/users_controller.rb
@@ -0,0 +1,80 @@
+# frozen_string_literal: true
+
+class UsersController < ApplicationController
+  before_action :authenticate_user!
+  before_action :set_user, only: %i[show follow unfollow accept decline cancel]
+  def index
+    @users = User.all_except(current_user)
+  end
+
+  def follow
+    @users = current_user.followers
+    current_user.send_follow_request_to(@user)
+    redirect_back fallback_location: root_path
+  end
+
+  def unfollow
+    make_it_an_unfriend_request
+    current_user.unfollow(@user)
+    redirect_back fallback_location: root_path
+  end
+
+  def accept
+    current_user.accept_follow_request_of(@user)
+    make_it_a_friend_request
+    redirect_back fallback_location: root_path
+  end
+
+  def decline
+    current_user.decline_follow_request_of(@user)
+    redirect_back fallback_location: root_path
+  end
+
+  def cancel
+    current_user.remove_follow_request_for(@user)
+    redirect_back fallback_location: root_path
+  end
+
+  def show
+    @user = User.find(params[:id])
+    @users = current_user.followers
+
+    @room = Room.new
+    @rooms = Room.public_rooms
+    @room_name = get_name(@user, current_user)
+    @single_room = Room.where(name: @room_name).first || Room.create_private_room([@user, current_user], @room_name)
+
+    @message = Message.new
+    @messages = @single_room.messages.order(created_at: :asc)
+    render 'rooms/index'
+  end
+
+  def show_user_profile
+    @user = User.find(params[:id])
+    redirect_to user_profile_path if @user == current_user
+  end
+
+  def user_profile
+    @user = current_user
+  end
+
+  private
+
+  def set_user
+    @user = User.find(params[:id])
+  end
+
+  def make_it_a_friend_request
+    current_user.send_follow_request_to(@user)
+    @user.accept_follow_request_of(current_user)
+  end
+
+  def make_it_an_unfriend_request
+    @user.unfollow(current_user) if @user.mutual_following_with?(current_user)
+  end
+
+  def get_name(user1, user2)
+    user = [user1, user2].sort
+    "private_#{user[0].id}_#{user[1].id}"
+  end
+end
diff --git a/app/helpers/application_helper.rb b/app/helpers/application_helper.rb
index de6be79..15b06f0 100644
--- a/app/helpers/application_helper.rb
+++ b/app/helpers/application_helper.rb
@@ -1,2 +1,4 @@
+# frozen_string_literal: true
+
 module ApplicationHelper
 end
diff --git a/app/helpers/maps_helper.rb b/app/helpers/maps_helper.rb
index 88ee3d5..46e14d8 100644
--- a/app/helpers/maps_helper.rb
+++ b/app/helpers/maps_helper.rb
@@ -1,2 +1,17 @@
+# frozen_string_literal: true
+
 module MapsHelper
+  def sort_by_distance_all(current_user)
+    User.all_except(current_user).sort_by do |user|
+      Geocoder::Calculations.distance_between([current_user.latitude, current_user.longitude],
+                                              [user.latitude, user.longitude])
+    end
+  end
+
+  def sort_by_distance_followers(current_user)
+    current_user.followers.sort_by do |user|
+      Geocoder::Calculations.distance_between([current_user.latitude, current_user.longitude],
+                                              [user.latitude, user.longitude])
+    end
+  end
 end
diff --git a/app/helpers/rooms_helper.rb b/app/helpers/rooms_helper.rb
new file mode 100644
index 0000000..60bf7cc
--- /dev/null
+++ b/app/helpers/rooms_helper.rb
@@ -0,0 +1,4 @@
+# frozen_string_literal: true
+
+module RoomsHelper
+end
diff --git a/app/javascript/controllers/reset_form_controller.js b/app/javascript/controllers/reset_form_controller.js
new file mode 100644
index 0000000..3e9bd8b
--- /dev/null
+++ b/app/javascript/controllers/reset_form_controller.js
@@ -0,0 +1,7 @@
+import { Controller } from "@hotwired/stimulus"
+
+export default class extends Controller {
+    reset() {
+        this.element.reset();
+    }
+}
diff --git a/app/javascript/controllers/scroll_controller.js b/app/javascript/controllers/scroll_controller.js
new file mode 100644
index 0000000..0eca7ba
--- /dev/null
+++ b/app/javascript/controllers/scroll_controller.js
@@ -0,0 +1,16 @@
+import { Controller } from "@hotwired/stimulus"
+
+export default class extends Controller {
+    connect() {
+        const messages = document.getElementById('messages');
+        messages.addEventListener('DOMNodeInserted', this.resetScroll);
+        this.resetScroll(messages);
+    }
+
+    disconnect() {
+    }
+
+    resetScroll() {
+        messages.scrollTop = messages.scrollHeight - messages.clientHeight;
+    }
+}
\ No newline at end of file
diff --git a/app/jobs/application_job.rb b/app/jobs/application_job.rb
index d394c3d..bef3959 100644
--- a/app/jobs/application_job.rb
+++ b/app/jobs/application_job.rb
@@ -1,3 +1,5 @@
+# frozen_string_literal: true
+
 class ApplicationJob < ActiveJob::Base
   # Automatically retry jobs that encountered a deadlock
   # retry_on ActiveRecord::Deadlocked
diff --git a/app/mailers/application_mailer.rb b/app/mailers/application_mailer.rb
index 3c34c81..d84cb6e 100644
--- a/app/mailers/application_mailer.rb
+++ b/app/mailers/application_mailer.rb
@@ -1,4 +1,6 @@
+# frozen_string_literal: true
+
 class ApplicationMailer < ActionMailer::Base
-  default from: "from@example.com"
-  layout "mailer"
+  default from: 'from@example.com'
+  layout 'mailer'
 end
diff --git a/app/models/application_record.rb b/app/models/application_record.rb
index b63caeb..08dc537 100644
--- a/app/models/application_record.rb
+++ b/app/models/application_record.rb
@@ -1,3 +1,5 @@
+# frozen_string_literal: true
+
 class ApplicationRecord < ActiveRecord::Base
   primary_abstract_class
 end
diff --git a/app/models/message.rb b/app/models/message.rb
new file mode 100644
index 0000000..1c52396
--- /dev/null
+++ b/app/models/message.rb
@@ -0,0 +1,17 @@
+# frozen_string_literal: true
+
+class Message < ApplicationRecord
+  belongs_to :user
+  belongs_to :room
+  after_create_commit { broadcast_append_to room }
+  before_create :confirm_participant
+
+  validates :body, presence: { message: 'не может быть пустым' }
+
+  def confirm_participant
+    return unless room.is_private
+
+    is_participant = Participant.where(user_id: user.id, room_id: room.id).first
+    throw :abort unless is_participant
+  end
+end
diff --git a/app/models/participant.rb b/app/models/participant.rb
new file mode 100644
index 0000000..d210085
--- /dev/null
+++ b/app/models/participant.rb
@@ -0,0 +1,6 @@
+# frozen_string_literal: true
+
+class Participant < ApplicationRecord
+  belongs_to :user
+  belongs_to :room
+end
diff --git a/app/models/room.rb b/app/models/room.rb
new file mode 100644
index 0000000..a7831c8
--- /dev/null
+++ b/app/models/room.rb
@@ -0,0 +1,25 @@
+# frozen_string_literal: true
+
+class Room < ApplicationRecord
+  validates_uniqueness_of :name
+  scope :public_rooms, -> { where(is_private: false) }
+  after_create_commit { broadcast_if_public }
+  has_many :messages
+  has_many :participants, dependent: :destroy
+
+  def broadcast_if_public
+    broadcast_append_to 'rooms' unless is_private
+  end
+
+  def self.create_private_room(users, room_name)
+    single_room = Room.create(name: room_name, is_private: true)
+    users.each do |user|
+      Participant.create(user_id: user.id, room_id: single_room.id)
+    end
+    single_room
+  end
+
+  def participant?(room, user)
+    room.participants.where(user: user).exists?
+  end
+end
diff --git a/app/models/user.rb b/app/models/user.rb
new file mode 100644
index 0000000..7651d42
--- /dev/null
+++ b/app/models/user.rb
@@ -0,0 +1,97 @@
+# frozen_string_literal: true
+
+require 'open-uri'
+
+class User < ApplicationRecord
+  # Include default devise modules. Others available are:
+  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
+
+  devise :database_authenticatable, :registerable,
+         :recoverable, :rememberable, :validatable,
+         :omniauthable, omniauth_providers: %i[google_oauth2 github]
+
+  scope :all_except, ->(user) { where.not(id: user) }
+  after_create_commit { broadcast_append_to 'users' }
+  has_many :messages
+  has_one_attached :avatar
+  after_commit :add_default_avatar, on: %i[create update]
+  followability
+
+  validates :email, presence: { message: 'не может быть пустым' },
+                    uniqueness: { message: 'такой аккаунт уже зарегистрирован' }
+  # validates_numericality_of :latitude,
+  #                           greater_than_or_equal_to: -90,
+  #                           message: 'ширина должна быть в диапазоне от -90 до 90'
+
+  # validates_numericality_of :latitude,
+  #                           greater_than_or_equal_to: 90,
+  #                           message: 'ширина должна быть в диапазоне от -90 до 90'
+
+  # validates_numericality_of :longitude,
+  #                           greater_than_or_equal_to: -180,
+  #                           message: 'ширина должна быть в диапазоне от -180 до 180'
+
+  # validates_numericality_of :latitude,
+  #                           greater_than_or_equal_to: 180,
+  #                           message: 'ширина должна быть в диапазоне от -180 до 180'
+
+  def unfollow(user)
+    followerable_relationships.where(followable_id: user.id).destroy_all
+  end
+
+  def self.search(params)
+    if params[:query].blank?
+      none
+    else
+      where(
+        'full_name LIKE ?', "%#{sanitize_sql_like(params[:query])}%"
+      )
+    end
+  end
+
+  def self.from_omniauth(auth)
+    where(provider: auth.provider, uid: auth.uid).first_or_create do |user|
+      user.email = auth.info.email
+      user.password = Devise.friendly_token[0, 20]
+      user.full_name = auth.info.name
+      user.avatar_url = auth.info.image
+      # If you are using confirmable and the provider(s) you use validate emails,
+      # uncomment the line below to skip the confirmation emails.
+      # user.skip_confirmation!
+    end
+  end
+
+  def self.from_omniauth_github(access_token)
+    data = access_token.info
+    user = User.where(email: data['email']).first
+    user ||= User.create(
+      full_name: data['name'],
+      email: data['email'],
+      password: Devise.friendly_token[0, 20],
+      avatar_url: data['image'],
+      provider: access_token.provider,
+      uid: access_token.uid
+    )
+    user
+  end
+
+  def avatar_thumbnail
+    avatar.variant(resize_to_limit: [150, 150]).processed
+  end
+
+  def chat_avatar
+    avatar.variant(resize_to_limit: [50, 50]).processed
+  end
+
+  private
+
+  def add_default_avatar
+    unless avatar.attached?
+      avatar.attach(
+        io: File.open(Rails.root.join('app', 'assets', 'images', 'no-photo.png')),
+        filename: 'no-photo.png',
+        content_type: 'image/png'
+      )
+    end
+  end
+end
diff --git a/app/views/devise/confirmations/new.html.erb b/app/views/devise/confirmations/new.html.erb
new file mode 100644
index 0000000..2570d36
--- /dev/null
+++ b/app/views/devise/confirmations/new.html.erb
@@ -0,0 +1,16 @@
+<h2><%=t(:send_confirmation)%></h2>
+
+<%= form_for(resource, as: resource_name, url: confirmation_path(resource_name), html: { method: :post }) do |f| %>
+  <%= render "devise/shared/error_messages", resource: resource %>
+
+  <div class="field">
+    <%= f.label :email %><br />
+    <%= f.email_field :email, autofocus: true, autocomplete: "email", value: (resource.pending_reconfirmation? ? resource.unconfirmed_email : resource.email) %>
+  </div>
+
+  <div class="actions">
+    <%= f.submit t(:send_confirmation) %>
+  </div>
+<% end %>
+
+<%= render "devise/shared/links" %>
diff --git a/app/views/devise/mailer/confirmation_instructions.html.erb b/app/views/devise/mailer/confirmation_instructions.html.erb
new file mode 100644
index 0000000..e7a1785
--- /dev/null
+++ b/app/views/devise/mailer/confirmation_instructions.html.erb
@@ -0,0 +1,5 @@
+<p><%=t(:welcome)%> <%= @email %>!</p>
+
+<p><%=t(:confirm_account)%></p>
+
+<p><%= link_to 'Confirm my account', confirmation_url(@resource, confirmation_token: @token) %></p>
diff --git a/app/views/devise/mailer/email_changed.html.erb b/app/views/devise/mailer/email_changed.html.erb
new file mode 100644
index 0000000..f63598e
--- /dev/null
+++ b/app/views/devise/mailer/email_changed.html.erb
@@ -0,0 +1,7 @@
+<p><%= t(:hello)%> <%= @email %>!</p>
+
+<% if @resource.try(:unconfirmed_email?) %>
+  <p> <%=t(:notify_you_email_changed)%><%= @resource.unconfirmed_email %>.</p>
+<% else %>
+  <p><%=t(:notify_you_email_has_changed)%><%= @resource.email %>.</p>
+<% end %>
diff --git a/app/views/devise/mailer/password_change.html.erb b/app/views/devise/mailer/password_change.html.erb
new file mode 100644
index 0000000..3cbfbcb
--- /dev/null
+++ b/app/views/devise/mailer/password_change.html.erb
@@ -0,0 +1,3 @@
+<p><%=t(:hello)%>% <%= @resource.email %>!</p>
+
+<p><%=t((:notify_you_password_changed)) %></p>
diff --git a/app/views/devise/mailer/reset_password_instructions.html.erb b/app/views/devise/mailer/reset_password_instructions.html.erb
new file mode 100644
index 0000000..64eb2af
--- /dev/null
+++ b/app/views/devise/mailer/reset_password_instructions.html.erb
@@ -0,0 +1,7 @@
+<p><%= t(:hello) %> <%= @resource.email %>!</p>
+
+<p><%=t(:link_to_you_password)%></p>
+
+<p><%= link_to t(:change_my_password), edit_password_url(@resource, reset_password_token: @token) %></p>
+
+<p><%=t(:ignore_if_you_did_not_request)%></p>
diff --git a/app/views/devise/mailer/unlock_instructions.html.erb b/app/views/devise/mailer/unlock_instructions.html.erb
new file mode 100644
index 0000000..88f9aa2
--- /dev/null
+++ b/app/views/devise/mailer/unlock_instructions.html.erb
@@ -0,0 +1,7 @@
+<p><%= t(:hello)%> <%= @resource.email %>!</p>
+
+<p><%=t(:blocked_accounts)%></p>
+
+<p><%=t(:click_link_to_unlock)%></p>
+
+<p><%= link_to t(:unlock_my_account), unlock_url(@resource, unlock_token: @token) %></p>
diff --git a/app/views/devise/passwords/edit.html.erb b/app/views/devise/passwords/edit.html.erb
new file mode 100644
index 0000000..677e72d
--- /dev/null
+++ b/app/views/devise/passwords/edit.html.erb
@@ -0,0 +1,25 @@
+<h2>Change your password</h2>
+
+<%= form_for(resource, as: resource_name, url: password_path(resource_name), html: { method: :put }) do |f| %>
+  <%= render "devise/shared/error_messages", resource: resource %>
+  <%= f.hidden_field :reset_password_token %>
+
+  <div class="field">
+    <%= f.label :password, t(:new_password) %><br />
+    <% if @minimum_password_length %>
+      <em>(<%= @minimum_password_length %> <%=t(:chatacters_minimum)%>)</em><br />
+    <% end %>
+    <%= f.password_field :password, autofocus: true, autocomplete: "new-password" %>
+  </div>
+
+  <div class="field">
+    <%= f.label :password_confirmation, t(:confirm_new_password) %><br />
+    <%= f.password_field :password_confirmation, autocomplete: "new-password" %>
+  </div>
+
+  <div class="actions">
+    <%= f.submit t(:change_my_password), data: {turbo: false}  %>
+  </div>
+<% end %>
+
+<%= render "devise/shared/links" %>
diff --git a/app/views/devise/passwords/new.html.erb b/app/views/devise/passwords/new.html.erb
new file mode 100644
index 0000000..90a20f7
--- /dev/null
+++ b/app/views/devise/passwords/new.html.erb
@@ -0,0 +1,16 @@
+<h2>Forgot your password?</h2>
+
+<%= form_for(resource, as: resource_name, url: password_path(resource_name), html: { method: :post }) do |f| %>
+  <%= render "devise/shared/error_messages", resource: resource %>
+
+  <div class="field">
+    <%= f.label :email %><br />
+    <%= f.email_field :email, autofocus: true, autocomplete: "email" %>
+  </div>
+
+  <div class="actions">
+    <%= f.submit t(:send_me_resst_instructions), data: {turbo: false} %>
+  </div>
+<% end %>
+
+<%= render "devise/shared/links" %>
diff --git a/app/views/devise/registrations/edit.html.erb b/app/views/devise/registrations/edit.html.erb
new file mode 100644
index 0000000..f2001b7
--- /dev/null
+++ b/app/views/devise/registrations/edit.html.erb
@@ -0,0 +1,77 @@
+<%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put }) do |f| %>
+  <%= render "devise/shared/error_messages", resource: resource %>
+  <div class="container-xl px-4 mt-4">
+      <hr class="mt-0 mb-4">
+      <div class="row">
+          <div class="col-xl-4">
+              <div class="card mb-4 mb-xl-0">
+                  <div class="card-header"><%=t(:profile_picture)%></div>
+                  <div class="card-body text-center">
+                        <%= image_tag(resource.avatar_thumbnail, class: "img-account-profile rounded-circle mb-2") if resource.avatar.attached? %>
+                      <div class="small font-italic text-muted mb-4"><%= t(:input_avatar)%></div>
+                      <div class="field">
+                        <%= f.label :avatar, class: "small mb-1" %><br />
+                        <%= f.file_field :avatar, class: "btn btn-primary"%>
+                      </div>
+                  </div>
+              </div>
+          </div>
+          <div class="col-xl-8">
+              <div class="card mb-4">
+                  <div class="card-header"><%=t(:account_details)%></div>
+                  <div class="card-body">
+                          <div class="row gx-3 mb-3">
+                              <div class="col-md-12">
+                                <div class="field">
+                                  <%= f.label :full_name, t(:full_name), class: "small mb-1" %><br />
+                                  <%= f.text_field :full_name, autofocus: true, class: "form-control", placeholder: t(:enter_full_name)%>
+                                </div>
+                              </div>
+                          </div>
+                            <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
+                              <div><%= t(:currently_waiting)%> <%= resource.unconfirmed_email %></div>
+                            <% end %>
+                          <div class="row gx-3 mb-3">
+                              <div class="col-md-6">
+                                  <%= f.label :email, t(:email), class: "small mb-1" %> <br />
+                                  <%= f.email_field :email, autofocus: true, autocomplete: "email", class: "form-control" %>                                  
+                              </div>
+                          </div>
+                          <div class="row gx-3 mb-3">
+                            <div class="col-md-6">                          
+                                <%= f.label :password, t(:password), class:"small mb-1" %> <br />
+                                <%= f.password_field :password, autocomplete: "new-password", class: "form-control", placeholder: t(:leave_blank_if_you_don_t_want_to_change_it) %>
+                                  <% if @minimum_password_length %>
+                                    <br />
+                                    <em><%= @minimum_password_length %> <%=t(:chatacters_minimum)%></em>
+                                  <% end %>
+                            </div>
+                          </div>
+                          <div class="row gx-3 mb-3">
+                              <div class="col-md-6">
+                                <div class="field">
+                                  <%= f.label :password_confirmation, t(:confirm_password), class: "small mb-1" %><br />
+                                  <%= f.password_field :password_confirmation, autocomplete: "new-password", class: "form-control" %>
+                                </div>
+                              </div>
+                              <div class="col-md-6">
+                              <div class="field">                              
+                                <%= f.label :current_password, t(:current_password), class:"small mb-1" %><br />
+                                <%= f.password_field :current_password, autocomplete: "current-password", class: "form-control", placeholder: t(:current_password_to_confirm) %>
+                              </div>
+                            </div>
+                          </div>
+                          <div class="row gx-3 mb-3">
+                              <div class="col-md-10">
+                                <%= f.submit t(:save_changes), class: "btn btn-primary btn-lg", data: {turbo: false} %>
+                              </div>
+                              <div class="col-md-2">
+                                <%= button_to t(:cancel_my_account), registration_path(resource_name), class:"btn btn-danger btn-md", data: { confirm: t(:are_you_sure) }, method: :delete %>
+                            </div>
+                          </div>                            
+                  </div>
+              </div>
+          </div>
+      </div>
+  </div>
+<% end %>
diff --git a/app/views/devise/registrations/new.html.erb b/app/views/devise/registrations/new.html.erb
new file mode 100644
index 0000000..f838f4c
--- /dev/null
+++ b/app/views/devise/registrations/new.html.erb
@@ -0,0 +1,49 @@
+<div class="login-wrapper text-center mt-5">
+
+<h2>Sign up</h2>
+
+<%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
+  <%= render "devise/shared/error_messages", resource: resource %>
+  <div class="container">
+  <%= f.label :avatar, class: "small mb-1" %><br />
+  <%= f.file_field :avatar, class: "btn btn-light"%>
+
+  <div class="row justify-content-center">
+    <div class="col-3">
+    <%= f.label :email %><br />
+    <%= f.email_field :email, id: "email-input", autocomplete: "email", class: 'form-control' %>
+    </div>
+  </div>
+
+  <div class="row justify-content-center">
+    <div class="col-3">
+    <%= f.label :full_name %><br />
+    <%= f.text_field :full_name, autofocus: true, autocomplete: "full_name", class: 'form-control' %>
+    </div>
+  </div>
+
+  <div class="row justify-content-center">
+    <div class="col-3">
+    <%= f.label :password %>
+    <% if @minimum_password_length %>
+    <em>(<%= @minimum_password_length %> characters minimum)</em>
+    <% end %><br />
+    <%= f.password_field :password, id: "password-input", autocomplete: "new-password", class: 'form-control' %>
+    </div>
+  </div>
+
+  <div class="row justify-content-center">
+    <div class="col-3">
+    <%= f.label :password_confirmation, "Password confirmation" %><br />
+    <%= f.password_field :password_confirmation, autocomplete: "new-password", class: 'form-control' %>
+    </div>
+  </div>
+
+  <div class="actions">
+    <%= f.submit "Sign up", data: {turbo: false} %>
+  </div>
+  </div>
+<% end %>
+
+<%= render "devise/shared/links" %>
+</div>
diff --git a/app/views/devise/sessions/new.html.erb b/app/views/devise/sessions/new.html.erb
new file mode 100644
index 0000000..ec31f58
--- /dev/null
+++ b/app/views/devise/sessions/new.html.erb
@@ -0,0 +1,47 @@
+<div class="row">
+<div class="col-4">
+</div>
+<div class="col-4">
+      <div class="container">
+        <div class="row align-items-center justify-content-center">
+          <div class="col-md-7">
+            <div class="mb-4 mx-auto">
+              <h3><%= t(:sign_in)%></h3>
+            </div>
+            <%= form_for(resource, as: resource_name, url: session_path(resource_name)) do |f| %>
+              <div class="form-group first">
+                <div class="field">
+                  <%= f.label :email, "Email" %><br />
+                  <%= f.email_field :email, id: "email-input", autocomplete: "email", class: "form-control" %>
+                </div>
+
+              </div>
+              <div class="form-group last mb-3">
+                <div class="field">
+                  <%= f.label :password, "Password", id: "my-password-user"%><br />
+                  <%= f.password_field :password, id: "password-input", autocomplete: "current-password", class: "form-control" %>
+                </div>               
+              </div>
+              
+              <div class="d-flex mb-5 align-items-center">
+                  <% if devise_mapping.rememberable? %>
+                    <div class="field">
+                      <%= f.check_box :remember_me %>
+                      <%= f.label :remember_me %>
+                    </div>
+                  <% end %>
+              </div>
+
+                <div class="actions">
+                  <%= f.submit t(:sign_in), data: {turbo: false}, class: "btn btn-block btn-primary" %>
+                </div>
+              <% end %>
+
+              <span class="d-block text-center my-4 text-muted">&mdash; or &mdash;</span>
+
+              <%= render "devise/shared/links" %>
+          </div>
+        </div>
+      </div>
+    </div>
+</div>
\ No newline at end of file
diff --git a/app/views/devise/shared/_error_messages.html.erb b/app/views/devise/shared/_error_messages.html.erb
new file mode 100644
index 0000000..ba7ab88
--- /dev/null
+++ b/app/views/devise/shared/_error_messages.html.erb
@@ -0,0 +1,15 @@
+<% if resource.errors.any? %>
+  <div id="error_explanation">
+    <h2>
+      <%= I18n.t("errors.messages.not_saved",
+                 count: resource.errors.count,
+                 resource: resource.class.model_name.human.downcase)
+       %>
+    </h2>
+    <ul>
+      <% resource.errors.full_messages.each do |message| %>
+        <li><%= message %></li>
+      <% end %>
+    </ul>
+  </div>
+<% end %>
diff --git a/app/views/devise/shared/_links.html.erb b/app/views/devise/shared/_links.html.erb
new file mode 100644
index 0000000..30616a1
--- /dev/null
+++ b/app/views/devise/shared/_links.html.erb
@@ -0,0 +1,34 @@
+<%- if devise_mapping.omniauthable? %>
+  <div class="row">
+  <div class="col-5">
+  </div>
+  <%- resource_class.omniauth_providers.each do |provider| %>
+  <div class="col-1">
+    <%= form_for "Login", 
+    url: omniauth_authorize_path(resource_name, provider),
+    method: :post,
+    data: {turbo: "false"} do |f|%>
+      <%= f.submit t(:log_in), type: "image", src: url_for("/assets/#{provider}.png")%>
+    <% end %>
+  </div>
+  <% end %>
+  </div>
+<% end %>
+
+<%- if controller_name != 'sessions' %>
+  <%= link_to t(:log_in), new_session_path(resource_name), class: "btn btn-outline-primary"  %><br />
+<% end %>
+
+<%- if devise_mapping.recoverable? && controller_name != 'passwords' && controller_name != 'registrations' %>
+  <%= link_to t(:forgot_password), new_password_path(resource_name), class: "btn btn-outline-primary" %><br />
+<% end %>
+
+<%- if devise_mapping.confirmable? && controller_name != 'confirmations' %>
+  <%= link_to t(:resend_confirmation_instructions), new_confirmation_path(resource_name) %><br />
+<% end %>
+
+<%- if devise_mapping.lockable? && resource_class.unlock_strategy_enabled?(:email) && controller_name != 'unlocks' %>
+  <%= link_to t(:resend_unlock_instructions), new_unlock_path(resource_name) %><br />
+<% end %>
+
+
diff --git a/app/views/devise/unlocks/new.html.erb b/app/views/devise/unlocks/new.html.erb
new file mode 100644
index 0000000..ffc34de
--- /dev/null
+++ b/app/views/devise/unlocks/new.html.erb
@@ -0,0 +1,16 @@
+<h2>Resend unlock instructions</h2>
+
+<%= form_for(resource, as: resource_name, url: unlock_path(resource_name), html: { method: :post }) do |f| %>
+  <%= render "devise/shared/error_messages", resource: resource %>
+
+  <div class="field">
+    <%= f.label :email %><br />
+    <%= f.email_field :email, autofocus: true, autocomplete: "email" %>
+  </div>
+
+  <div class="actions">
+    <%= f.submit "Resend unlock instructions" %>
+  </div>
+<% end %>
+
+<%= render "devise/shared/links" %>
diff --git a/app/views/layouts/_flash.html.erb b/app/views/layouts/_flash.html.erb
new file mode 100644
index 0000000..07d4e94
--- /dev/null
+++ b/app/views/layouts/_flash.html.erb
@@ -0,0 +1,8 @@
+<div class="container">
+    <% flash.each do |type, msg| %>
+      <div class='alert alert-primary alert-dismissible' role="alert">
+        <%= msg %>
+        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
+    <% end %>
+    </div>
+  </div>
\ No newline at end of file
diff --git a/app/views/layouts/_navbar.html.erb b/app/views/layouts/_navbar.html.erb
new file mode 100644
index 0000000..370f859
--- /dev/null
+++ b/app/views/layouts/_navbar.html.erb
@@ -0,0 +1,40 @@
+<nav class="navbar navbar-expand-lg bg-light"> 
+  <div class="container-fluid">
+  <% if current_user %>
+    <%= link_to "Maply", maps_path, class: 'navbar-brand', id: 'root'%>
+  <% else %>
+    <%= link_to "Maply", new_user_session_path, class: 'navbar-brand', id: 'sign_in_lnk'%>
+  <% end %>
+    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
+      <span class="navbar-toggler-icon"></span>
+    </button>
+    <div class="collapse navbar-collapse" id="navbarNav">
+      <ul class="navbar-nav">
+          <% if current_user %>
+        <li class="nav-item">
+          <%= link_to t(:log_out), destroy_user_session_path, class: 'nav-link', id: 'log_out', 'data-turbo-method': :delete %>
+        </li>
+        <li class="nav-item">
+          <%= link_to t(:edit_profile), edit_user_registration_path, class: 'nav-link', id: 'edit_profile', 'data-turbo-method': :update %>
+        </li>
+        <li class="nav-item">
+          <%= link_to t(:show_profile), user_profile_path, class: 'nav-link', id: 'show_profile', 'data-turbo-method': :user_profile %>
+        </li>
+        <li class="nav-item">
+          <%= link_to t(:chat), rooms_path, class: 'nav-link', id: 'chat', 'data-turbo-method': :show %>
+        </li>
+          <% else %>
+        <li class="nav-item">
+          <%= link_to t(:sign_up), new_user_registration_path, id: 'sign_up', class: 'nav-link' %>
+        </li>
+        <li class="nav-item">
+          <%= link_to t(:log_in), new_user_session_path, id: 'log_in', class: 'nav-link' %>
+        </li>
+        <% end %>
+      </ul>
+    </div>
+  </div>
+  <div id="flash" style="position:absolute; z-index: 2; right: 10px;">
+          <%= render partial: "layouts/flash" %>
+        </div>
+</nav>
\ No newline at end of file
diff --git a/app/views/layouts/_new_message_form.html.erb b/app/views/layouts/_new_message_form.html.erb
new file mode 100644
index 0000000..afc3b64
--- /dev/null
+++ b/app/views/layouts/_new_message_form.html.erb
@@ -0,0 +1,7 @@
+<div class="form-grousp msg-form">
+    <%= form_with(model: [@single_room, @message], remote: true, class:'d-flex',
+    data: { controller: "reset-form", action: "turbo:submit-end->reset-form#reset"}) do |f|%>
+        <%= f.text_field :body, id: 'chat-text', class: 'form-control msg-content', autocomplete: 'off'%>
+        <%= f.submit "Send", data: {disable_with: false}, class: 'btn btn-primary'%>
+</div>
+<%end%>
\ No newline at end of file
diff --git a/app/views/layouts/_new_room_form.html.erb b/app/views/layouts/_new_room_form.html.erb
new file mode 100644
index 0000000..e69de29
diff --git a/app/views/layouts/application.html.erb b/app/views/layouts/application.html.erb
index 648e2d5..218f37b 100644
--- a/app/views/layouts/application.html.erb
+++ b/app/views/layouts/application.html.erb
@@ -5,15 +5,33 @@
     <meta name="viewport" content="width=device-width,initial-scale=1">
     <%= csrf_meta_tags %>
     <%= csp_meta_tag %>
-<!-- CSS only -->
-<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
-<!-- JavaScript Bundle with Popper -->
-<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
+    
+    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet">
+    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
+    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>
     <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
     <%= javascript_importmap_tags %>
     <script src="https://api-maps.yandex.ru/2.1/?apikey=<%=Rails.application.credentials[:yandex_maps_api_key]%>&lang=ru_RU" type="text/javascript"></script>
+    <script
+      src="https://cdn.jsdelivr.net/gh/alpinejs/alpine@v2.x.x/dist/alpine.js"
+      defer
+    ></script>
+    
+  <style>
+      <%= ".msg-#{current_user&.id}" %> {
+      background-color: #007bff !important;
+      padding: 10px;
+      }
+      <%= ".cont-#{current_user&.id}" %> {
+      display: flex;
+        justify-content: flex-end
+      }
+    </style>
+
   </head>
   <body>
+
+<%= render partial: "layouts/navbar" %>
     <%= yield %>
   </body>
 </html>
diff --git a/app/views/maps/_chat_button.html.erb b/app/views/maps/_chat_button.html.erb
new file mode 100644
index 0000000..2cdd230
--- /dev/null
+++ b/app/views/maps/_chat_button.html.erb
@@ -0,0 +1,4 @@
+<div>
+    <%= link_to t(:chat), contact, class: "btn btn-outline-success formBtn", id: "chat_btn"%>
+</div>
+
diff --git a/app/views/maps/_contact.html.erb b/app/views/maps/_contact.html.erb
new file mode 100644
index 0000000..4d233e7
--- /dev/null
+++ b/app/views/maps/_contact.html.erb
@@ -0,0 +1,11 @@
+<tr id="<%= dom_id(contact) %>" data-stream-enter-class="animate-item-in" data-stream-exit-class="animate-item-out">
+  <td><%= contact.full_name %></td>
+  <td><%= contact.email %></td>
+  <td>
+  <% if button == 'Action'%>
+     <%= render partial: "maps/followability_button", locals: { contact: contact }  %> 
+  <% elsif button == 'Chat' %>
+    <%= render partial: "maps/chat_button", locals: { contact: contact } %>
+  <% end %>
+  </td>
+</tr>
diff --git a/app/views/maps/_follow_request.html.erb b/app/views/maps/_follow_request.html.erb
new file mode 100644
index 0000000..b199c2c
--- /dev/null
+++ b/app/views/maps/_follow_request.html.erb
@@ -0,0 +1,5 @@
+<% user.follow_requests.each do |request| %>
+    <%= request.followerable.email %> wants to be your friend
+    <%= button_to t('maps.accept'), accept_path(request.followerable), id: "accept_id" %>
+    <%= button_to t('maps.decline'), decline_path(request.followerable) %>
+<% end %>
diff --git a/app/views/maps/_followability_button.html.erb b/app/views/maps/_followability_button.html.erb
new file mode 100644
index 0000000..af26472
--- /dev/null
+++ b/app/views/maps/_followability_button.html.erb
@@ -0,0 +1,7 @@
+<% if current_user.mutual_following_with?(contact) %>
+<%= button_to t('maps.delete'), unfollow_path(contact), class: "btn btn-danger formBtn" %>
+<% elsif current_user.sent_follow_request_to?(contact)%>
+  <%= button_to t('maps.cancel'), cancel_path(contact), class: "btn btn-outline-primary formBtn" %>
+<% else %>
+  <%= button_to t('maps.add'),  follow_path(contact), class: "btn btn-success formBtn" %>
+<% end %>
diff --git a/app/views/maps/_list.html.erb b/app/views/maps/_list.html.erb
new file mode 100644
index 0000000..27b2269
--- /dev/null
+++ b/app/views/maps/_list.html.erb
@@ -0,0 +1,14 @@
+<table class="table table-zebra mt-0 w-full">
+  <thead>
+    <tr>
+      <th class="text-left"><%= t('maps.name')%></th>
+      <th class="text-left"><%= t('maps.email')%></th>
+      <th class="text-left"><%= t('maps.action')%></th>
+    </tr>
+  </thead>
+  <tbody id="contacts-list" data-controller="contacts" data-action="">
+  <% contacts.each do |contact| %>
+    <%= render partial: "maps/contact", locals: { contact: contact, button: "Action" }  %>
+  <% end %>
+  </tbody>
+</table>
diff --git a/app/views/maps/_nearest.html.erb b/app/views/maps/_nearest.html.erb
new file mode 100644
index 0000000..4915eea
--- /dev/null
+++ b/app/views/maps/_nearest.html.erb
@@ -0,0 +1,12 @@
+<table class="table table-zebra mt-0 w-full">
+  <thead>
+    <tr class="w-full">
+      <th class="text-left"><%= t('maps.name')%></th>
+      <th class="text-left"><%= t('maps.email')%></th>
+      <th class="text-left"><%= t('maps.action')%></th>
+    </tr>
+  </thead>
+  <tbody id="nearest-person" data-controller="contacts" data-action="">
+  <%= render partial: "maps/contact", locals: { contact: user, button: button } %>
+  </tbody>
+</table>
diff --git a/app/views/maps/find_nearest.turbo_stream.erb b/app/views/maps/find_nearest.turbo_stream.erb
new file mode 100644
index 0000000..8650b4a
--- /dev/null
+++ b/app/views/maps/find_nearest.turbo_stream.erb
@@ -0,0 +1 @@
+<%= turbo_stream.update 'find-nearest-container', partial: 'nearest', locals: { user: @nearest_person, button: "Action" } %>
diff --git a/app/views/maps/find_nearest_friend.turbo_stream.erb b/app/views/maps/find_nearest_friend.turbo_stream.erb
new file mode 100644
index 0000000..4f16ab3
--- /dev/null
+++ b/app/views/maps/find_nearest_friend.turbo_stream.erb
@@ -0,0 +1 @@
+<%= turbo_stream.update 'find-nearest-friend-container', partial: 'nearest', locals: { user: @nearest_friend, button: "Chat" } %>
\ No newline at end of file
diff --git a/app/views/maps/helper.html.erb b/app/views/maps/helper.html.erb
new file mode 100644
index 0000000..552b8cc
--- /dev/null
+++ b/app/views/maps/helper.html.erb
@@ -0,0 +1,35 @@
+<div class="row">
+            <%= render partial: "maps/follow_request" , locals: { user: current_user }%>
+                <%= form_with url: find_nearest_path do |form| %>
+                    <div class="d-grid gap-2 col-2 mx-auto">
+                        <%= form.submit t('maps.nearest_person'), class: "btn btn-primary" %>
+                    </div>
+                    <% end %>
+
+                        <div id='find-nearest-container'></div>
+
+                        <% if current_user.followers.count != 0%>
+                            <div class="prose lg:prose-xl">
+                                <%= form_with url: find_nearest_friend_path do |form| %>
+                                    <div class="d-grid gap-2 col-2 mx-auto">
+                                        <%= form.submit t('maps.nearest_friend'), class: "btn btn-primary" %>
+                                    </div>
+                                    <% end %>
+                            </div>
+                            <div id='find-nearest-friend-container'></div>
+                            <hr />
+                            <% end %>
+        </div>
+
+        <%= form_tag maps_path, method: :get, data: { turbo_frame: "search-results" , turbo_action: "advance" } do |f|%>
+            <div class="d-grid gap-2 col-6 mx-auto">
+                <%= text_field_tag :query, nil, placeholder: "Search user" , class: "input input-bordered " %>
+                    <%= submit_tag t('search'), class: "btn btn-primary" %>
+            </div>
+            <% end %>
+
+                <div class="bg-gray-100 p-8 col-span-5">
+                    <%= turbo_frame_tag "search-results" do %>
+                        <%= render partial: "maps/list" , locals: { contacts: @users } %>
+                            <% end %>
+                </div>
\ No newline at end of file
diff --git a/app/views/maps/index.html.erb b/app/views/maps/index.html.erb
index d117db3..571b74c 100644
--- a/app/views/maps/index.html.erb
+++ b/app/views/maps/index.html.erb
@@ -1,68 +1,162 @@
 <script type="text/javascript">
-let center = [55.81863845116168,37.87356624320199];
-ymaps.ready(init);
+    ymaps.ready(init);
+    var MyMap;
 
-let MyMap;
-
-function init() {
-	myMap = new ymaps.Map('ymap', {
-		center: [55.76, 37.64],
-		zoom: 10,
-		// type: 'yandex#satellite'
-	});
+    function init() {
+        myMap = new ymaps.Map('ymap', {
+            center: [55.76, 37.64],
+            zoom: 10
+        });
 
-	myMap.controls.remove('geolocationControl');
-	myMap.controls.remove('searchControl');
-	myMap.controls.remove('trafficControl');
-	myMap.controls.remove('typeSelector');
-	myMap.controls.remove('fullscreenControl'); 
-	myMap.controls.remove('rulerControl');
-	myMap.controls.remove('miniMap');
+        myMap.controls.remove('searchControl');
+        myMap.controls.remove('trafficControl');
+        myMap.controls.remove('typeSelector');
+        myMap.controls.remove('fullscreenControl');
+        myMap.controls.remove('rulerControl');
+        myMap.controls.remove('miniMap');
 
-	let geolocation = ymaps.geolocation
+        let geolocation = ymaps.geolocation;
 
-    geolocation.get({
-        provider: 'browser',
-        mapStateAutoApply: true
-    }).then(function (result) {
-        result.geoObjects.options.set('preset', 'islands#blueCircleIcon');
-		result.geoObjects.get(0).properties.set({
-            balloonContentBody: 'Мое местоположение'
+        geolocation.get({
+            provider: 'browser',
+            mapStateAutoApply: true
+        }).then(function (result) {
+            result.geoObjects.options.set('preset', 'islands#blueCircleIcon');
+            result.geoObjects.get(0).properties.set({
+                balloonContentBody: 'Moe местоположение'
+            });
+            document.getElementById('latitude').value = result.geoObjects.get(0).geometry.getCoordinates()[0];
+            document.getElementById('longitude').value = result.geoObjects.get(0).geometry.getCoordinates()[1];
+            document.getElementById('Update').click();
+            myMap.geoObjects.add(result.geoObjects);
         });
-		console.log(result.geoObjects.get(0).geometry.getCoordinates());
-        myMap.geoObjects.add(result.geoObjects);
-    });
 
-	myMap.copyrights.add('© Иван Погиба');
-}
+        myMap.copyrights.add('© 2022 Иван Погиба');
+        show_users(<%= current_user.followers.count %>);
+    }
 
-function add_points() {
-	ymaps.geoQuery([
-            {
-                type: 'Point',
-                coordinates: [55.73, 37.75]
+    function show_users(length) {
+        for (let i = 0; i < length; i++) {
+            latitude = document.getElementById('user-latitude-' + i).textContent;
+            longitude = document.getElementById('user-longitude-' + i).textContent;
+            email = document.getElementById('user-email-' + i).textContent;
+            updated_at = document.getElementById('user-updated_at-' + i).textContent;
+            avatar = document.getElementById('user-avatar-' + i);
+            id = document.getElementById('user-id-' + i).textContent;
+            myPlacemark = new ymaps.Placemark([parseFloat(latitude), parseFloat(longitude)], {
+                balloonContentHeader: '<a href = "/user/show_user_profile/' + id + '">' + email + '</a><br>',
+                balloonContentBody: avatar.innerHTML + '<br>' +
+                    '<b>Последний раз заходил в ' + updated_at + '</b> <br/>',
+                // hintContent: name
             },
-            {
-                type: 'Point',
-                coordinates: [55.10, 37.45]
-            },
-            {
-                type: 'Point',
-                coordinates: [55.25, 37.35]
-            }
-        ]).addToMap(myMap);
-}
+                {
+                    iconLayout: 'default#image',
+                    iconImageHref: avatar.getElementsByTagName("img")[0].getAttribute("src"),
+                    iconImageSize: [40, 40],
+                    iconImageOffset: [-5, -38]
+                }
+            );
 
+            myMap.geoObjects.add(myPlacemark);
+        }
+    }
 
 </script>
 <div class="row">
-    <div class="col-10" style="margin: 0; padding: 0;">
-      <div id="ymap" class="map"></div>
+    <div class="col-9" style="margin: 0; padding: 0;">
+        <div id="ymap" class="map"></div>
     </div>
 
-    <div class="col-2" style="margin: 0; padding: 0;">
-		
-		<button type="button" class="btn btn-primary" onclick="add_points()">Add</button>
+    <div class="col-3" style="margin: 0; padding: 0;">
+
+        <div class="container py-1">
+            <div class="row">
+                <div class="card-body text-center">
+                        <%= image_tag(current_user.avatar_thumbnail, size: "96x96" , style: "width: 150px;" ,
+                            class: "rounded-circle img-fluid" ) %>
+                                        <h5 class="my-3">
+                                            <%= current_user.full_name %>
+                                        </h5>
+                                        <p class="text-muted mb-1">
+                                            <%= current_user.email %>
+                                        </p>
+                                        <p class="text-muted mb-4">
+                                            <%= t('maps.last_update', time: time_ago_in_words(current_user.updated_at)) %>
+                                        </p>
+                </div>
+            </div>
+        </div>
+        <hr>
+                    <% current_user.follow_requests.each do |request| %>
+                      <%= t('maps.want_to_be_your_friend', name: request.followerable.full_name) %>
+                      <div class="mt-2">
+                      <div class="d-inline-block">
+                        <%= button_to t(:accept), accept_path(request.followerable), id: "accept_id", class: 'btn btn-primary btn-sm' %>
+                      </div>
+                    <div class="d-inline-block ms-2"><%= button_to t(:decline), decline_path(request.followerable), class: 'btn btn-danger btn-sm' %></div>
+                        </div>
+                    <hr>
+                    <% end %>
+
+            <div class="container text-center py-1">
+                <%= form_with url: find_nearest_path do |form| %>
+                    <%= form.submit t('maps.nearest_person'), class: "btn btn-primary" %>
+                <% end %>
+                <div id='find-nearest-container'></div>
+            </div>
+                <hr>
+            <div class="text-center">
+                    <% if current_user.followers.count !=0%>
+                            <div class="prose lg:prose-xl mb-4">
+                                <%= form_with url: find_nearest_friend_path do |form| %>
+                                    <%= form.submit t('maps.nearest_firend') , class: "btn btn-primary" %>
+                                <% end %>
+                            </div>
+                            <% end %>
+                <div id='find-nearest-friend-container'></div>
+        <div class="container">
+            <%= form_tag maps_path, method: :get, data: { turbo_frame: "search-results" , turbo_action: "advance" } do |f|%>
+                <div class="input-group">
+                    <%= text_field_tag :query, nil, placeholder: "Search user" , class: "form-control" %>
+                    <%= submit_tag t(:search) , class: "btn btn btn-primary", id: "search_id" %>
+                </div>
+            <% end %>
+            <%= turbo_frame_tag "search-results" do %>
+            <%= render partial: "maps/list" , locals: { contacts: @users } %>
+            <% end %>
+            </div>
+        </div>
     </div>
 
-  </div>
+</div>
+</div>
+<div id="users" style="display: none;">
+    <% current_user.followers.each_with_index do |user, index|%>
+        <p id="user-email-<%=index%>">
+            <%= user.email %>
+        </p>
+        <p id="user-latitude-<%=index%>">
+            <%= user.latitude%>
+        </p>
+        <p id="user-longitude-<%=index%>">
+            <%= user.longitude%>
+        </p>
+        <p id="user-updated_at-<%=index%>">
+            <%= user.updated_at%>
+        </p>
+        <p id="user-id-<%=index%>">
+            <%= user.id%>
+        </p>
+        <p id="user-avatar-<%=index%>">
+            <%= image_tag(user.avatar, size:"96x96")%>
+        <%end%>
+</div>
+</div>
+
+<%= form_with url: result_path do |f| %>
+    <div style="display: none">
+        <%= f.text_field :latitude, id: :latitude %>
+            <%= f.text_field :longitude, id: :longitude %>
+                <%= f.submit t('maps.update_geolocation') , id: "Update" , class: "btn btn-primary" %>
+    </div>
+    <%end%>
\ No newline at end of file
diff --git a/app/views/messages/_message.html.erb b/app/views/messages/_message.html.erb
new file mode 100644
index 0000000..c5ad70c
--- /dev/null
+++ b/app/views/messages/_message.html.erb
@@ -0,0 +1,12 @@
+<div class="cont-<%=message.user.id%>">
+  <div class="message-box msg-<%= message.user.id %>">
+     <div class="d-flex align-items-center">
+      <%= image_tag(message.user.chat_avatar, class:'chat_pfp') %>
+      <div>
+        <h6 class="name"> <%= message.user.email %></h6>
+        <p class="time"><%= t('maps.time_ago', time: time_ago_in_words(message.created_at)) %> </p>
+      </div>
+    </div>
+    <%= message.body %>
+  </div>
+</div>
\ No newline at end of file
diff --git a/app/views/rooms/index.html.erb b/app/views/rooms/index.html.erb
new file mode 100644
index 0000000..1ba5cca
--- /dev/null
+++ b/app/views/rooms/index.html.erb
@@ -0,0 +1,22 @@
+<div id="chatroom_container" class="row bg-dark text-light">
+  <div id="side_panel" class="col-md-4 col-sm-4">
+  <h4> <%= t(:friends)%> </h4>
+    <% turbo_stream_from "users"%>
+    <div id="users">
+        <%=render @users%>
+    </div>
+</div>
+  <div id="room_container"
+    class="col-md-8 col-sm-8 bg-dark text-light">
+    <% if @single_room %>
+    <div id="single_room">
+        <h4 class="text-center"> <%= @user&.full_name || @single_room.name %> </h4>
+        <%= turbo_stream_from @single_room %>
+        <div id="messages" data-controller="scroll">
+          <%= render @messages %>
+        </div>
+        <%= render 'layouts/new_message_form' %>
+      </div>
+    <%end%>
+  </div>
+</div>
diff --git a/app/views/users/_user.html.erb b/app/views/users/_user.html.erb
new file mode 100644
index 0000000..9b0074c
--- /dev/null
+++ b/app/views/users/_user.html.erb
@@ -0,0 +1,11 @@
+<% if @single_room && @single_room.participant?(@single_room, user) %>
+  <% isActive = 'active' %>
+<% else %>
+  <% isActive = '' %>
+<% end %>
+<li class="list-group-item d-flex align-items-center justify-content-between user_list_item <%= isActive %>">
+  <div>
+    <%= link_to image_tag(user.chat_avatar, class: 'chat_pfp'), user %>
+  </div>
+  <%= link_to user.full_name, user, class:'ms-2 me-auto username', data: {turbo: "false"}, id: "#{dom_id(user)}" %>
+</li>
diff --git a/app/views/users/show_user_profile.html.erb b/app/views/users/show_user_profile.html.erb
new file mode 100644
index 0000000..030b979
--- /dev/null
+++ b/app/views/users/show_user_profile.html.erb
@@ -0,0 +1,93 @@
+<body style="background-color: #eee;">
+<section style="background-color: #eee;">
+    <div class="container py-5">
+      <div class="row">
+        <div class="col-lg-4">
+          <div class="card mb-4">
+            <div class="card-body text-center">
+            <%= image_tag(@user.avatar_thumbnail, size: "96x96" , style: "width: 150px;" ,
+                            class: "rounded-circle img-fluid" ) %>
+              <h5 class="my-3"><%= @user.full_name %></h5>
+              <p class="text-muted mb-1"></p>
+              <p class="text-muted mb-4"><%= t('maps.last_update', time: time_ago_in_words(current_user.updated_at)) %></p>
+              <div class="d-flex justify-content-center mb-2">
+              <% if current_user.mutual_following_with?(@user)%>
+                <%= link_to "Chat", @user, class: 'btn btn-primary' %>
+              <% else %>
+                <%= render partial: "maps/followability_button", locals: { contact: @user }  %>
+              <% end %> 
+              </div>
+            </div>
+          </div>
+          <div class="card mb-4 mb-lg-0">
+            <div class="card-body p-0">
+              <ul class="list-group list-group-flush rounded-3">
+              <% @user.followers.each do |friend| %>
+                <li class="list-group-item d-flex justify-content-between align-items-center p-3">
+                  <p class="mb-0"> <%= link_to friend.full_name, "/user/show_user_profile/" + friend.id.to_s, id: "#{dom_id(friend)}" %></p>
+                  <span class="badge bg-primary rounded-pill"><%= friend.followers.count %></span>
+                </li>
+              <% end %>
+              </ul>
+            </div>
+          </div>
+        </div>
+        <div class="col-lg-8">
+          <div class="card mb-4">
+            <div class="card-body">
+              <div class="row">
+                <div class="col-sm-3">
+                  <p class="mb-0"><%=t(:full_name)%></p>
+                </div>
+                <div class="col-sm-9">
+                  <p class="text-muted mb-0"><%= @user.full_name %></p>
+                </div>
+              </div>
+              <hr>
+              <div class="row">
+                <div class="col-sm-3">
+                  <p class="mb-0"><%=t(:email)%></p>
+                </div>
+                <div class="col-sm-9">
+                  <p class="text-muted mb-0"><%= @user.email %></p>
+                </div>
+              </div>
+              <hr>
+              <div class="row">
+                <div class="col-sm-3">
+                  <p class="mb-0"><%=t(:since)%></p>
+                </div>
+                <div class="col-sm-9">
+                  <p class="text-muted mb-0"><%= time_ago_in_words(@user.created_at) %></p>
+                </div>
+              </div>
+              <hr>
+              <div class="row">
+                <div class="col-sm-3">
+                  <p class="mb-0"><%=t(:location)%></p>
+                </div>
+                <div class="col-sm-9">
+                  <p class="text-muted mb-0"><%= Geocoder.search([@user.latitude.to_f, @user.longitude.to_f]).first.address %></p>
+                </div>
+              </div>
+            </div>
+          </div>
+              <div class="card mb-4 mb-md-0">
+                <div class="card-body">
+                  <p class="mb-4"><span class="text-primary font-italic me-1"><%= t('maps.action') %></span></p>
+                  <div class="d-flex flex-row-reverse">
+                      <%= link_to 'Back', url_for(:back), class: "p-2 btn btn-primary active", style: "margin: 0 0 0 30px;" %>
+                      <% if current_user.mutual_following_with?(@user)%>  
+                      <%= turbo_stream_from @user %>
+                      <div id="<%= dom_id(@user) %>">
+                        <%= render partial: "maps/followability_button", locals: { contact: @user }  %>
+                      </div>
+                      <% end %>
+                  </div>
+                </div>
+            </div>
+        </div>
+      </div>
+    </div>
+  </section>
+</body>
diff --git a/app/views/users/user_profile.html.erb b/app/views/users/user_profile.html.erb
new file mode 100644
index 0000000..48990b4
--- /dev/null
+++ b/app/views/users/user_profile.html.erb
@@ -0,0 +1,104 @@
+<body style="background-color: #eee;">
+<section style="background-color: #eee;">
+    <div class="container py-5">
+
+      <div class="row">
+        <div class="col-lg-4">
+          <div class="card mb-4">
+            <div class="card-body text-center">
+            <%= image_tag(current_user.avatar_thumbnail, size: "96x96" , style: "width: 150px;" ,
+                            class: "rounded-circle img-fluid" ) %>
+              <h5 class="my-3"><%= @user.full_name %></h5>
+              <p class="text-muted mb-1"></p>
+              <p class="text-muted mb-4"><%= t('maps.last_update', time: time_ago_in_words(current_user.updated_at)) %></p>
+              <div class="d-flex justify-content-center mb-2">
+                <%= link_to t(:edit_profile), user_edit_path, class: 'btn btn-primary' %> 
+              </div>
+            </div>
+          </div>
+          <div class="card mb-4 mb-lg-0">
+            <div class="card-body p-0">
+              <ul class="list-group list-group-flush rounded-3">
+              <% current_user.followers.each do |friend| %>
+                <li class="list-group-item d-flex justify-content-between align-items-center p-3">
+                  <p class="mb-0"> <%= link_to friend.full_name, "/user/show_user_profile/" + friend.id.to_s, id: "#{dom_id(friend)}" %></p>
+                  <span class="badge bg-primary rounded-pill"><%= friend.followers.count %></span>
+
+                </li>
+              <% end %>
+              </ul>
+            </div>
+          </div>
+        </div>
+        <div class="col-lg-8">
+          <div class="card mb-4">
+            <div class="card-body">
+              <div class="row">
+                <div class="col-sm-3">
+                  <p class="mb-0"><%=t(:full_name)%></p>
+                </div>
+                <div class="col-sm-9">
+                  <p class="text-muted mb-0"><%= @user.full_name %></p>
+                </div>
+              </div>
+              <hr>
+              <div class="row">
+                <div class="col-sm-3">
+                  <p class="mb-0"><%=t(:email)%></p>
+                </div>
+                <div class="col-sm-9">
+                  <p class="text-muted mb-0"><%= @user.email %></p>
+                </div>
+              </div>
+              <hr>
+              <div class="row">
+                <div class="col-sm-3">
+                  <p class="mb-0"><%=t(:since)%></p>
+                </div>
+                <div class="col-sm-9">
+                  <p class="text-muted mb-0"><%= time_ago_in_words(@user.created_at) %></p>
+                </div>
+              </div>
+              <hr>
+              <div class="row">
+                <div class="col-sm-3">
+                  <p class="mb-0"><%=t(:location)%></p>
+                </div>
+                <div class="col-sm-9">
+                  <p class="text-muted mb-0"><%= Geocoder.search([@user.latitude.to_f, @user.longitude.to_f]).first.address %></p>
+                </div>
+              </div>
+            </div>
+          </div>
+              <div class="card mb-4 mb-md-0">
+                <div class="card-body">
+                  <p class="mb-4"><span class="text-primary font-italic me-1"><%=t(:friends_requests)%></span>
+                  </p>
+                  <% if current_user.follow_requests.count == 0 %>
+                  <p class="mb-1" style="font-size: .77rem;"><%= t(:not_have_any_requests)%></p>
+                  <div class="progress rounded" style="height: 5px;">
+                    <div class="progress-bar" role="progressbar" style="width: 100%" aria-valuenow="100"
+                      aria-valuemin="0" aria-valuemax="100"></div>
+                  </div>
+                  <% else %>
+                  <div class="row">
+                    <% current_user.follow_requests.each do |request| %>
+                    <div class="col-9">
+                      <%= t('maps.want_to_be_your_friend', name: request.followerable.full_name) %>
+                    </div>
+                    <div class="col-1">
+                      <%= button_to t('maps.accept'), accept_path(request.followerable), class: 'btn btn-primary btn-sm' %>
+                    </div>
+                    <div class="col-1">
+                      <%= button_to t('maps.decline'), decline_path(request.followerable), class: 'btn btn-danger btn-sm'  %>
+                    </div>
+                    <% end %>
+                  <% end %>
+                  </div>
+                </div>
+              </div>
+        </div>
+      </div>
+    </div>
+  </section>
+</body>
diff --git a/avatar.jpg b/avatar.jpg
new file mode 100644
index 0000000..e69de29
diff --git a/bin/bundle b/bin/bundle
index 981e650..75807d3 100755
--- a/bin/bundle
+++ b/bin/bundle
@@ -8,46 +8,46 @@
 # this file is here to facilitate running it.
 #
 
-require "rubygems"
+require 'rubygems'
 
 m = Module.new do
   module_function
 
   def invoked_as_script?
-    File.expand_path($0) == File.expand_path(__FILE__)
+    File.expand_path($PROGRAM_NAME) == File.expand_path(__FILE__)
   end
 
   def env_var_version
-    ENV["BUNDLER_VERSION"]
+    ENV['BUNDLER_VERSION']
   end
 
   def cli_arg_version
     return unless invoked_as_script? # don't want to hijack other binstubs
-    return unless "update".start_with?(ARGV.first || " ") # must be running `bundle update`
+    return unless 'update'.start_with?(ARGV.first || ' ') # must be running `bundle update`
+
     bundler_version = nil
     update_index = nil
     ARGV.each_with_index do |a, i|
-      if update_index && update_index.succ == i && a =~ Gem::Version::ANCHORED_VERSION_PATTERN
-        bundler_version = a
-      end
+      bundler_version = a if update_index && update_index.succ == i && a =~ Gem::Version::ANCHORED_VERSION_PATTERN
       next unless a =~ /\A--bundler(?:[= ](#{Gem::Version::VERSION_PATTERN}))?\z/
-      bundler_version = $1
+
+      bundler_version = Regexp.last_match(1)
       update_index = i
     end
     bundler_version
   end
 
   def gemfile
-    gemfile = ENV["BUNDLE_GEMFILE"]
+    gemfile = ENV['BUNDLE_GEMFILE']
     return gemfile if gemfile && !gemfile.empty?
 
-    File.expand_path("../Gemfile", __dir__)
+    File.expand_path('../Gemfile', __dir__)
   end
 
   def lockfile
     lockfile =
       case File.basename(gemfile)
-      when "gems.rb" then gemfile.sub(/\.rb$/, gemfile)
+      when 'gems.rb' then gemfile.sub(/\.rb$/, gemfile)
       else "#{gemfile}.lock"
       end
     File.expand_path(lockfile)
@@ -55,15 +55,17 @@ m = Module.new do
 
   def lockfile_version
     return unless File.file?(lockfile)
+
     lockfile_contents = File.read(lockfile)
     return unless lockfile_contents =~ /\n\nBUNDLED WITH\n\s{2,}(#{Gem::Version::VERSION_PATTERN})\n/
+
     Regexp.last_match(1)
   end
 
   def bundler_requirement
     @bundler_requirement ||=
       env_var_version || cli_arg_version ||
-        bundler_requirement_for(lockfile_version)
+      bundler_requirement_for(lockfile_version)
   end
 
   def bundler_requirement_for(version)
@@ -73,28 +75,32 @@ m = Module.new do
 
     requirement = bundler_gem_version.approximate_recommendation
 
-    return requirement unless Gem.rubygems_version < Gem::Version.new("2.7.0")
+    return requirement unless Gem.rubygems_version < Gem::Version.new('2.7.0')
 
-    requirement += ".a" if bundler_gem_version.prerelease?
+    requirement += '.a' if bundler_gem_version.prerelease?
 
     requirement
   end
 
   def load_bundler!
-    ENV["BUNDLE_GEMFILE"] ||= gemfile
+    ENV['BUNDLE_GEMFILE'] ||= gemfile
 
     activate_bundler
   end
 
   def activate_bundler
     gem_error = activation_error_handling do
-      gem "bundler", bundler_requirement
+      gem 'bundler', bundler_requirement
     end
     return if gem_error.nil?
+
     require_error = activation_error_handling do
-      require "bundler/version"
+      require 'bundler/version'
+    end
+    if require_error.nil? && Gem::Requirement.new(bundler_requirement).satisfied_by?(Gem::Version.new(Bundler::VERSION))
+      return
     end
-    return if require_error.nil? && Gem::Requirement.new(bundler_requirement).satisfied_by?(Gem::Version.new(Bundler::VERSION))
+
     warn "Activating bundler (#{bundler_requirement}) failed:\n#{gem_error.message}\n\nTo install the version of bundler this project requires, run `gem install bundler -v '#{bundler_requirement}'`"
     exit 42
   end
@@ -109,6 +115,4 @@ end
 
 m.load_bundler!
 
-if m.invoked_as_script?
-  load Gem.bin_path("bundler", "bundle")
-end
+load Gem.bin_path('bundler', 'bundle') if m.invoked_as_script?
diff --git a/bin/importmap b/bin/importmap
index 36502ab..d423864 100755
--- a/bin/importmap
+++ b/bin/importmap
@@ -1,4 +1,5 @@
 #!/usr/bin/env ruby
+# frozen_string_literal: true
 
-require_relative "../config/application"
-require "importmap/commands"
+require_relative '../config/application'
+require 'importmap/commands'
diff --git a/bin/rails b/bin/rails
index efc0377..a31728a 100755
--- a/bin/rails
+++ b/bin/rails
@@ -1,4 +1,6 @@
 #!/usr/bin/env ruby
-APP_PATH = File.expand_path("../config/application", __dir__)
-require_relative "../config/boot"
-require "rails/commands"
+# frozen_string_literal: true
+
+APP_PATH = File.expand_path('../config/application', __dir__)
+require_relative '../config/boot'
+require 'rails/commands'
diff --git a/bin/rake b/bin/rake
index 4fbf10b..c199955 100755
--- a/bin/rake
+++ b/bin/rake
@@ -1,4 +1,6 @@
 #!/usr/bin/env ruby
-require_relative "../config/boot"
-require "rake"
+# frozen_string_literal: true
+
+require_relative '../config/boot'
+require 'rake'
 Rake.application.run
diff --git a/bin/setup b/bin/setup
index ec47b79..516b651 100755
--- a/bin/setup
+++ b/bin/setup
@@ -1,8 +1,10 @@
 #!/usr/bin/env ruby
-require "fileutils"
+# frozen_string_literal: true
+
+require 'fileutils'
 
 # path to your application root.
-APP_ROOT = File.expand_path("..", __dir__)
+APP_ROOT = File.expand_path('..', __dir__)
 
 def system!(*args)
   system(*args) || abort("\n== Command #{args} failed ==")
@@ -13,9 +15,9 @@ FileUtils.chdir APP_ROOT do
   # This script is idempotent, so that you can run it at any time and get an expectable outcome.
   # Add necessary setup steps to this file.
 
-  puts "== Installing dependencies =="
-  system! "gem install bundler --conservative"
-  system("bundle check") || system!("bundle install")
+  puts '== Installing dependencies =='
+  system! 'gem install bundler --conservative'
+  system('bundle check') || system!('bundle install')
 
   # puts "\n== Copying sample files =="
   # unless File.exist?("config/database.yml")
@@ -23,11 +25,11 @@ FileUtils.chdir APP_ROOT do
   # end
 
   puts "\n== Preparing database =="
-  system! "bin/rails db:prepare"
+  system! 'bin/rails db:prepare'
 
   puts "\n== Removing old logs and tempfiles =="
-  system! "bin/rails log:clear tmp:clear"
+  system! 'bin/rails log:clear tmp:clear'
 
   puts "\n== Restarting application server =="
-  system! "bin/rails restart"
+  system! 'bin/rails restart'
 end
diff --git a/config.ru b/config.ru
index 4a3c09a..6dc8321 100644
--- a/config.ru
+++ b/config.ru
@@ -1,6 +1,8 @@
+# frozen_string_literal: true
+
 # This file is used by Rack-based servers to start the application.
 
-require_relative "config/environment"
+require_relative 'config/environment'
 
 run Rails.application
 Rails.application.load_server
diff --git a/config/application.rb b/config/application.rb
index 1c79117..8f1b2f3 100644
--- a/config/application.rb
+++ b/config/application.rb
@@ -1,6 +1,8 @@
-require_relative "boot"
+# frozen_string_literal: true
 
-require "rails/all"
+require_relative 'boot'
+
+require 'rails/all'
 
 # Require the gems listed in Gemfile, including any gems
 # you've limited to :test, :development, or :production.
@@ -10,6 +12,11 @@ module Map
   class Application < Rails::Application
     # Initialize configuration defaults for originally generated Rails version.
     config.load_defaults 7.0
+    # здесь пока доступна только локаль ru
+    config.i18n.available_locales = %i[en ru]
+    config.i18n.default_locale = :en
+
+    config.active_storage.variant_processor = :mini_magick
 
     # Configuration for the application, engines, and railties goes here.
     #
diff --git a/config/boot.rb b/config/boot.rb
index 988a5dd..c04863f 100644
--- a/config/boot.rb
+++ b/config/boot.rb
@@ -1,4 +1,6 @@
-ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../Gemfile", __dir__)
+# frozen_string_literal: true
 
-require "bundler/setup" # Set up gems listed in the Gemfile.
-require "bootsnap/setup" # Speed up boot time by caching expensive operations.
+ENV['BUNDLE_GEMFILE'] ||= File.expand_path('../Gemfile', __dir__)
+
+require 'bundler/setup' # Set up gems listed in the Gemfile.
+require 'bootsnap/setup' # Speed up boot time by caching expensive operations.
diff --git a/config/cable.yml b/config/cable.yml
index b85b1f9..9eb82e4 100644
--- a/config/cable.yml
+++ b/config/cable.yml
@@ -1,5 +1,6 @@
 development:
-  adapter: async
+  adapter: redis
+  url: redis://localhost:6379/1
 
 test:
   adapter: test
diff --git a/config/credentials.yml.enc b/config/credentials.yml.enc
index 5ddda11..75e5f4e 100644
--- a/config/credentials.yml.enc
+++ b/config/credentials.yml.enc
@@ -1 +1 @@
-OSJN6zauYjNmX4h89GJHjlqb1TBg9CLFutS2wC2yA/ELQNv6L2+vmhkDXpg6FkNRVbmctrxCvBnZdeCbGETsic0HQTtcRmFTVIyAd4lkKJSiZsbHEHCeTlg1DL80fncKw2AVJxW/6k6r5mdZsMgpC37iDSEOC0kANh7KWfTRAh7GxYfkYAtXFEj/GM4qOUK/sQo8N3yVFqcnNts5EIMX6hzkqUofyMYrrSe4eRXunHS2EqE8uyQH2xVgD3AkPjg6rENxyjVDnbhAWPp5GIkzQVctmyHfGGneWBh+VjYQTTmei0cwFjHXpawK7GrCJlIyutIVHj1+lrC4PipEOMyjHfXvbcZsUU/cOQXSU0yuC4l5Dy7PSiDvuEdSHvUvQ9SHiK78J0dEIY/v7pApWjm306VSRSJh82SSj8Jk+gR2KXdUbTWvc8Fw3soSj6SlbUxPBYsAnYZl0eVntNImyGvp1vs+tSnU/IMBmfpu7gvx--Jk6Jy9g4CxwcZc3y--rsn2Px0HyOoowflb7t9Swg==
\ No newline at end of file
+ZIIxu+IH+4moKYIzI6EP8UlhTN+JiJcTbfPN12w6xFpsLARiaJDc+ubcj6nVilmHpwofYN/vLF300Hg8mFX0qfi4hG7HeYAtG4O4flGbECXXUjUwO7CUolk+Bd8R6JXs1SNmr6Gx9aY8ipF0EJTApX5QaoDYnh3+fQeiQqtBGUEoup1NsSHxHKxK9OmhdHYjb7b+7fn7yTmjZl1W/ha6lABaVOppkMVn6C3eD16EwwDY9y5f3nCoVmdSRiSrAoAlp+PjsZ7mtUhaZLEKT6UtK2TGj0EmtzBfqX8Z6XOVbEaFrZ85RCRg5L/PB9XWynmnTa7sojxvi/NSds9J730VGB3KOhaYeYSUW887HCj66ESbNP+COt8R9/i8Ufsnd1YKLQVtAFmyHY6O3gbqsm6YrYOX79B1tWWQKEbGtdOLxiKCi43oUw1S6c6aoVAydq/e19rNp35aZNmLpw68ix8XtL3V9WzcKlU4ftcV7brQjtE1qcUeja7rDm6JYSMya1KIqgGchjPnaCIg4sZuSavbsyunkjxtg9VOyBrIhrPnngQKnbnDDBFSbFYH+Xz2sEPIV8daySubTb+obGRt7O915Ai7+5p0Ra0DW59RZnry8h6YRaxT1TehQGrQdjBt4qK9lCOS9/uqa/AFsQM5SO78dWHpe8J266tA72qFhwq5Tl+7lB9HdODvtfAVWP5/rZEEjYuAFW61qR1bRugP/mbg6RkKjOXTpALs2wkb5kknXcTb6HokZdsQB7BYdBZqP639XJl93eAxCIC8Bf2h3TCNp2mUbs10I2kSNJ5jrQvG7v8VrXx/doiTcIvUZagylgPaLP6sEV7tNS/6BTR3zI8EHZg3B0RhNhDDeNRT1lyie1mH+7dlOibq6pJZhnNJfeA0Zx/YTYWodKIz2EknC+BSngePFt95CjxejKruA8p0qh5sWjgFR7ssLF0T7bQmzIp2iG1eesbEAxVSe3FoPkNTvCG2uaBDeENelhfzTgtj6USU0oToZ2aR6TMJurju0hToQPlrZsirVBnxhiG6RqYwCT0zsFQLytpJwGbW--d6WpCxYGkVDTmSWh--vKC8ZiB0CfYt5mDhkdZAAA==
\ No newline at end of file
diff --git a/config/environment.rb b/config/environment.rb
index cac5315..d5abe55 100644
--- a/config/environment.rb
+++ b/config/environment.rb
@@ -1,5 +1,7 @@
+# frozen_string_literal: true
+
 # Load the Rails application.
-require_relative "application"
+require_relative 'application'
 
 # Initialize the Rails application.
 Rails.application.initialize!
diff --git a/config/environments/development.rb b/config/environments/development.rb
index 8500f45..60675e6 100644
--- a/config/environments/development.rb
+++ b/config/environments/development.rb
@@ -1,8 +1,10 @@
-require "active_support/core_ext/integer/time"
+# frozen_string_literal: true
+
+require 'active_support/core_ext/integer/time'
 
 Rails.application.configure do
   # Settings specified here will take precedence over those in config/application.rb.
-
+  config.action_controller.default_url_options = { host: 'localhost', port: 3000 }
   # In the development environment your application's code is reloaded any time
   # it changes. This slows down response time but is perfect for development
   # since you don't have to restart the web server when you make code changes.
@@ -19,13 +21,13 @@ Rails.application.configure do
 
   # Enable/disable caching. By default caching is disabled.
   # Run rails dev:cache to toggle caching.
-  if Rails.root.join("tmp/caching-dev.txt").exist?
+  if Rails.root.join('tmp/caching-dev.txt').exist?
     config.action_controller.perform_caching = true
     config.action_controller.enable_fragment_cache_logging = true
 
     config.cache_store = :memory_store
     config.public_file_server.headers = {
-      "Cache-Control" => "public, max-age=#{2.days.to_i}"
+      'Cache-Control' => "public, max-age=#{2.days.to_i}"
     }
   else
     config.action_controller.perform_caching = false
diff --git a/config/environments/production.rb b/config/environments/production.rb
index c6009e5..2f02bdd 100644
--- a/config/environments/production.rb
+++ b/config/environments/production.rb
@@ -1,4 +1,6 @@
-require "active_support/core_ext/integer/time"
+# frozen_string_literal: true
+
+require 'active_support/core_ext/integer/time'
 
 Rails.application.configure do
   # Settings specified here will take precedence over those in config/application.rb.
@@ -22,7 +24,7 @@ Rails.application.configure do
 
   # Disable serving static files from the `/public` folder by default since
   # Apache or NGINX already handles this.
-  config.public_file_server.enabled = ENV["RAILS_SERVE_STATIC_FILES"].present?
+  config.public_file_server.enabled = ENV['RAILS_SERVE_STATIC_FILES'].present?
 
   # Compress CSS using a preprocessor.
   # config.assets.css_compressor = :sass
@@ -53,7 +55,7 @@ Rails.application.configure do
   config.log_level = :info
 
   # Prepend all log lines with the following tags.
-  config.log_tags = [ :request_id ]
+  config.log_tags = [:request_id]
 
   # Use a different cache store in production.
   # config.cache_store = :mem_cache_store
@@ -82,8 +84,8 @@ Rails.application.configure do
   # require "syslog/logger"
   # config.logger = ActiveSupport::TaggedLogging.new(Syslog::Logger.new "app-name")
 
-  if ENV["RAILS_LOG_TO_STDOUT"].present?
-    logger           = ActiveSupport::Logger.new(STDOUT)
+  if ENV['RAILS_LOG_TO_STDOUT'].present?
+    logger           = ActiveSupport::Logger.new($stdout)
     logger.formatter = config.log_formatter
     config.logger    = ActiveSupport::TaggedLogging.new(logger)
   end
diff --git a/config/environments/test.rb b/config/environments/test.rb
index 6ea4d1e..8f3f63c 100644
--- a/config/environments/test.rb
+++ b/config/environments/test.rb
@@ -1,4 +1,6 @@
-require "active_support/core_ext/integer/time"
+# frozen_string_literal: true
+
+require 'active_support/core_ext/integer/time'
 
 # The test environment is used exclusively to run your application's
 # test suite. You never need to work with it otherwise. Remember that
@@ -14,12 +16,12 @@ Rails.application.configure do
   # Eager loading loads your whole application. When running a single test locally,
   # this probably isn't necessary. It's a good idea to do in a continuous integration
   # system, or in some way before deploying your code.
-  config.eager_load = ENV["CI"].present?
+  config.eager_load = ENV['CI'].present?
 
   # Configure public file server for tests with Cache-Control for performance.
   config.public_file_server.enabled = true
   config.public_file_server.headers = {
-    "Cache-Control" => "public, max-age=#{1.hour.to_i}"
+    'Cache-Control' => "public, max-age=#{1.hour.to_i}"
   }
 
   # Show full error reports and disable caching.
diff --git a/config/importmap.rb b/config/importmap.rb
index 8dce42d..b57e7be 100644
--- a/config/importmap.rb
+++ b/config/importmap.rb
@@ -1,7 +1,9 @@
+# frozen_string_literal: true
+
 # Pin npm packages by running ./bin/importmap
 
-pin "application", preload: true
-pin "@hotwired/turbo-rails", to: "turbo.min.js", preload: true
-pin "@hotwired/stimulus", to: "stimulus.min.js", preload: true
-pin "@hotwired/stimulus-loading", to: "stimulus-loading.js", preload: true
-pin_all_from "app/javascript/controllers", under: "controllers"
+pin 'application', preload: true
+pin '@hotwired/turbo-rails', to: 'turbo.min.js', preload: true
+pin '@hotwired/stimulus', to: 'stimulus.min.js', preload: true
+pin '@hotwired/stimulus-loading', to: 'stimulus-loading.js', preload: true
+pin_all_from 'app/javascript/controllers', under: 'controllers'
diff --git a/config/initializers/assets.rb b/config/initializers/assets.rb
index 2eeef96..bcafccd 100644
--- a/config/initializers/assets.rb
+++ b/config/initializers/assets.rb
@@ -1,7 +1,9 @@
+# frozen_string_literal: true
+
 # Be sure to restart your server when you modify this file.
 
 # Version of your assets, change this if you want to expire all your assets.
-Rails.application.config.assets.version = "1.0"
+Rails.application.config.assets.version = '1.0'
 
 # Add additional assets to the asset load path.
 # Rails.application.config.assets.paths << Emoji.images_path
diff --git a/config/initializers/content_security_policy.rb b/config/initializers/content_security_policy.rb
index 54f47cf..691cfa1 100644
--- a/config/initializers/content_security_policy.rb
+++ b/config/initializers/content_security_policy.rb
@@ -1,3 +1,4 @@
+# frozen_string_literal: true
 # Be sure to restart your server when you modify this file.
 
 # Define an application-wide content security policy.
diff --git a/config/initializers/devise.rb b/config/initializers/devise.rb
new file mode 100644
index 0000000..b29e0df
--- /dev/null
+++ b/config/initializers/devise.rb
@@ -0,0 +1,361 @@
+# frozen_string_literal: true
+
+class TurboFailureApp < Devise::FailureApp
+  def respond
+    if request_format == :turbo_stream
+      redirect
+    else
+      super
+    end
+  end
+
+  def skip_format?
+    %w[html turbo_stream */*].include? request_format.to_s
+  end
+end
+
+# Assuming you have not yet modified this file, each configuration option below
+# is set to its default value. Note that some are commented out while others
+# are not: uncommented lines are intended to protect your configuration from
+# breaking changes in upgrades (i.e., in the event that future versions of
+# Devise change the default values for those options).
+#
+# Use this hook to configure devise mailer, warden hooks and so forth.
+# Many of these configuration options can be set straight in your model.
+Devise.setup do |config|
+  # The secret key used by Devise. Devise uses this key to generate
+  # random tokens. Changing this key will render invalid all existing
+  # confirmation, reset password and unlock tokens in the database.
+  # Devise will use the `secret_key_base` as its `secret_key`
+  # by default. You can change it below and use your own secret key.
+  # config.secret_key = '6c4205a8947ca19797e69d4c27ab0bdbef70f2f458fa44e6a20c21cf788d0379e414bb75fd5403ef1f13ad6e4b6dcab282010bc8993315d61d9554f37aa46860'
+
+  # ==> Controller configuration
+  # Configure the parent class to the devise controllers.
+  config.parent_controller = 'TurboDeviseController'
+
+  # ...
+
+  # ==> Navigation configuration
+  # ...
+  config.navigational_formats = ['*/*', :html, :turbo_stream]
+
+  # ...
+
+  # ==> Warden configuration
+  # ...
+  config.warden do |manager|
+    manager.failure_app = TurboFailureApp
+    #   manager.intercept_401 = false
+    #   manager.default_strategies(scope: :user).unshift :some_external_strategy
+  end
+
+  # ==> Controller configuration
+  # Configure the parent class to the devise controllers.
+  # config.parent_controller = 'DeviseController'
+
+  # ==> Mailer Configuration
+  # Configure the e-mail address which will be shown in Devise::Mailer,
+  # note that it will be overwritten if you use your own mailer class
+  # with default "from" parameter.
+  config.mailer_sender = 'please-change-me-at-config-initializers-devise@example.com'
+  config.omniauth :google_oauth2,
+                  Rails.application.credentials[:google_oauth_client_id],
+                  Rails.application.credentials[:google_oauth_client_secret]
+
+  config.omniauth :vkontakte,
+                  Rails.application.credentials[:vk_oauth_api_key],
+                  Rails.application.credentials[:vk_oauth_api_secret],
+                  scope: 'friends,audio,photos',
+                  display: 'popup',
+                  lang: 'en',
+                  # https: 1,
+                  image_size: 'original'
+
+  config.omniauth :github,
+                  Rails.application.credentials[:github_oauth_client_id],
+                  Rails.application.credentials[:github_oauth_client_secret]
+
+  # Configure the class responsible to send e-mails.
+  # config.mailer = 'Devise::Mailer'
+
+  # Configure the parent class responsible to send e-mails.
+  # config.parent_mailer = 'ActionMailer::Base'
+
+  # ==> ORM configuration
+  # Load and configure the ORM. Supports :active_record (default) and
+  # :mongoid (bson_ext recommended) by default. Other ORMs may be
+  # available as additional gems.
+  require 'devise/orm/active_record'
+
+  # ==> Configuration for any authentication mechanism
+  # Configure which keys are used when authenticating a user. The default is
+  # just :email. You can configure it to use [:username, :subdomain], so for
+  # authenticating a user, both parameters are required. Remember that those
+  # parameters are used only when authenticating and not when retrieving from
+  # session. If you need permissions, you should implement that in a before filter.
+  # You can also supply a hash where the value is a boolean determining whether
+  # or not authentication should be aborted when the value is not present.
+  # config.authentication_keys = [:email]
+
+  # Configure parameters from the request object used for authentication. Each entry
+  # given should be a request method and it will automatically be passed to the
+  # find_for_authentication method and considered in your model lookup. For instance,
+  # if you set :request_keys to [:subdomain], :subdomain will be used on authentication.
+  # The same considerations mentioned for authentication_keys also apply to request_keys.
+  # config.request_keys = []
+
+  # Configure which authentication keys should be case-insensitive.
+  # These keys will be downcased upon creating or modifying a user and when used
+  # to authenticate or find a user. Default is :email.
+  config.case_insensitive_keys = [:email]
+
+  # Configure which authentication keys should have whitespace stripped.
+  # These keys will have whitespace before and after removed upon creating or
+  # modifying a user and when used to authenticate or find a user. Default is :email.
+  config.strip_whitespace_keys = [:email]
+
+  # Tell if authentication through request.params is enabled. True by default.
+  # It can be set to an array that will enable params authentication only for the
+  # given strategies, for example, `config.params_authenticatable = [:database]` will
+  # enable it only for database (email + password) authentication.
+  # config.params_authenticatable = true
+
+  # Tell if authentication through HTTP Auth is enabled. False by default.
+  # It can be set to an array that will enable http authentication only for the
+  # given strategies, for example, `config.http_authenticatable = [:database]` will
+  # enable it only for database authentication.
+  # For API-only applications to support authentication "out-of-the-box", you will likely want to
+  # enable this with :database unless you are using a custom strategy.
+  # The supported strategies are:
+  # :database      = Support basic authentication with authentication key + password
+  # config.http_authenticatable = false
+
+  # If 401 status code should be returned for AJAX requests. True by default.
+  # config.http_authenticatable_on_xhr = true
+
+  # The realm used in Http Basic Authentication. 'Application' by default.
+  # config.http_authentication_realm = 'Application'
+
+  # It will change confirmation, password recovery and other workflows
+  # to behave the same regardless if the e-mail provided was right or wrong.
+  # Does not affect registerable.
+  # config.paranoid = true
+
+  # By default Devise will store the user in session. You can skip storage for
+  # particular strategies by setting this option.
+  # Notice that if you are skipping storage for all authentication paths, you
+  # may want to disable generating routes to Devise's sessions controller by
+  # passing skip: :sessions to `devise_for` in your config/routes.rb
+  config.skip_session_storage = [:http_auth]
+
+  # By default, Devise cleans up the CSRF token on authentication to
+  # avoid CSRF token fixation attacks. This means that, when using AJAX
+  # requests for sign in and sign up, you need to get a new CSRF token
+  # from the server. You can disable this option at your own risk.
+  # config.clean_up_csrf_token_on_authentication = true
+
+  # When false, Devise will not attempt to reload routes on eager load.
+  # This can reduce the time taken to boot the app but if your application
+  # requires the Devise mappings to be loaded during boot time the application
+  # won't boot properly.
+  # config.reload_routes = true
+
+  # ==> Configuration for :database_authenticatable
+  # For bcrypt, this is the cost for hashing the password and defaults to 12. If
+  # using other algorithms, it sets how many times you want the password to be hashed.
+  # The number of stretches used for generating the hashed password are stored
+  # with the hashed password. This allows you to change the stretches without
+  # invalidating existing passwords.
+  #
+  # Limiting the stretches to just one in testing will increase the performance of
+  # your test suite dramatically. However, it is STRONGLY RECOMMENDED to not use
+  # a value less than 10 in other environments. Note that, for bcrypt (the default
+  # algorithm), the cost increases exponentially with the number of stretches (e.g.
+  # a value of 20 is already extremely slow: approx. 60 seconds for 1 calculation).
+  config.stretches = Rails.env.test? ? 1 : 12
+
+  # Set up a pepper to generate the hashed password.
+  # config.pepper = '5a2268f73930298023a4d0c64a6352029a67be47deb0d8eefe8a2d75245c69880c0231c32d3a4b52958dcbea7002cc56ed8d0e554abcf49e66f98c77282ec7d5'
+
+  # Send a notification to the original email when the user's email is changed.
+  # config.send_email_changed_notification = false
+
+  # Send a notification email when the user's password is changed.
+  # config.send_password_change_notification = false
+
+  # ==> Configuration for :confirmable
+  # A period that the user is allowed to access the website even without
+  # confirming their account. For instance, if set to 2.days, the user will be
+  # able to access the website for two days without confirming their account,
+  # access will be blocked just in the third day.
+  # You can also set it to nil, which will allow the user to access the website
+  # without confirming their account.
+  # Default is 0.days, meaning the user cannot access the website without
+  # confirming their account.
+  # config.allow_unconfirmed_access_for = 2.days
+
+  # A period that the user is allowed to confirm their account before their
+  # token becomes invalid. For example, if set to 3.days, the user can confirm
+  # their account within 3 days after the mail was sent, but on the fourth day
+  # their account can't be confirmed with the token any more.
+  # Default is nil, meaning there is no restriction on how long a user can take
+  # before confirming their account.
+  # config.confirm_within = 3.days
+
+  # If true, requires any email changes to be confirmed (exactly the same way as
+  # initial account confirmation) to be applied. Requires additional unconfirmed_email
+  # db field (see migrations). Until confirmed, new email is stored in
+  # unconfirmed_email column, and copied to email column on successful confirmation.
+  config.reconfirmable = true
+
+  # Defines which key will be used when confirming an account
+  # config.confirmation_keys = [:email]
+
+  # ==> Configuration for :rememberable
+  # The time the user will be remembered without asking for credentials again.
+  # config.remember_for = 2.weeks
+
+  # Invalidates all the remember me tokens when the user signs out.
+  config.expire_all_remember_me_on_sign_out = true
+
+  # If true, extends the user's remember period when remembered via cookie.
+  # config.extend_remember_period = false
+
+  # Options to be passed to the created cookie. For instance, you can set
+  # secure: true in order to force SSL only cookies.
+  # config.rememberable_options = {}
+
+  # ==> Configuration for :validatable
+  # Range for password length.
+  config.password_length = 6..128
+
+  # Email regex used to validate email formats. It simply asserts that
+  # one (and only one) @ exists in the given string. This is mainly
+  # to give user feedback and not to assert the e-mail validity.
+  config.email_regexp = /\A[^@\s]+@[^@\s]+\z/
+
+  # ==> Configuration for :timeoutable
+  # The time you want to timeout the user session without activity. After this
+  # time the user will be asked for credentials again. Default is 30 minutes.
+  # config.timeout_in = 30.minutes
+
+  # ==> Configuration for :lockable
+  # Defines which strategy will be used to lock an account.
+  # :failed_attempts = Locks an account after a number of failed attempts to sign in.
+  # :none            = No lock strategy. You should handle locking by yourself.
+  # config.lock_strategy = :failed_attempts
+
+  # Defines which key will be used when locking and unlocking an account
+  # config.unlock_keys = [:email]
+
+  # Defines which strategy will be used to unlock an account.
+  # :email = Sends an unlock link to the user email
+  # :time  = Re-enables login after a certain amount of time (see :unlock_in below)
+  # :both  = Enables both strategies
+  # :none  = No unlock strategy. You should handle unlocking by yourself.
+  # config.unlock_strategy = :both
+
+  # Number of authentication tries before locking an account if lock_strategy
+  # is failed attempts.
+  # config.maximum_attempts = 20
+
+  # Time interval to unlock the account if :time is enabled as unlock_strategy.
+  # config.unlock_in = 1.hour
+
+  # Warn on the last attempt before the account is locked.
+  # config.last_attempt_warning = true
+
+  # ==> Configuration for :recoverable
+  #
+  # Defines which key will be used when recovering the password for an account
+  # config.reset_password_keys = [:email]
+
+  # Time interval you can reset your password with a reset password key.
+  # Don't put a too small interval or your users won't have the time to
+  # change their passwords.
+  config.reset_password_within = 6.hours
+
+  # When set to false, does not sign a user in automatically after their password is
+  # reset. Defaults to true, so a user is signed in automatically after a reset.
+  # config.sign_in_after_reset_password = true
+
+  # ==> Configuration for :encryptable
+  # Allow you to use another hashing or encryption algorithm besides bcrypt (default).
+  # You can use :sha1, :sha512 or algorithms from others authentication tools as
+  # :clearance_sha1, :authlogic_sha512 (then you should set stretches above to 20
+  # for default behavior) and :restful_authentication_sha1 (then you should set
+  # stretches to 10, and copy REST_AUTH_SITE_KEY to pepper).
+  #
+  # Require the `devise-encryptable` gem when using anything other than bcrypt
+  # config.encryptor = :sha512
+
+  # ==> Scopes configuration
+  # Turn scoped views on. Before rendering "sessions/new", it will first check for
+  # "users/sessions/new". It's turned off by default because it's slower if you
+  # are using only default views.
+  # config.scoped_views = false
+
+  # Configure the default scope given to Warden. By default it's the first
+  # devise role declared in your routes (usually :user).
+  # config.default_scope = :user
+
+  # Set this configuration to false if you want /users/sign_out to sign out
+  # only the current scope. By default, Devise signs out all scopes.
+  # config.sign_out_all_scopes = true
+
+  # ==> Navigation configuration
+  # Lists the formats that should be treated as navigational. Formats like
+  # :html, should redirect to the sign in page when the user does not have
+  # access, but formats like :xml or :json, should return 401.
+  #
+  # If you have any extra navigational formats, like :iphone or :mobile, you
+  # should add them to the navigational formats lists.
+  #
+  # The "*/*" below is required to match Internet Explorer requests.
+  # config.navigational_formats = ['*/*', :html]
+
+  # The default HTTP method used to sign out a resource. Default is :delete.
+  config.sign_out_via = :delete
+
+  # ==> OmniAuth
+  # Add a new OmniAuth provider. Check the wiki for more information on setting
+  # up on your models and hooks.
+  # config.omniauth :github, 'APP_ID', 'APP_SECRET', scope: 'user,public_repo'
+
+  # ==> Warden configuration
+  # If you want to use other strategies, that are not supported by Devise, or
+  # change the failure app, you can configure them inside the config.warden block.
+  #
+  # config.warden do |manager|
+  #   manager.intercept_401 = false
+  #   manager.default_strategies(scope: :user).unshift :some_external_strategy
+  # end
+
+  # ==> Mountable engine configurations
+  # When using Devise inside an engine, let's call it `MyEngine`, and this engine
+  # is mountable, there are some extra configurations to be taken into account.
+  # The following options are available, assuming the engine is mounted as:
+  #
+  #     mount MyEngine, at: '/my_engine'
+  #
+  # The router that invoked `devise_for`, in the example above, would be:
+  # config.router_name = :my_engine
+  #
+  # When using OmniAuth, Devise cannot automatically set OmniAuth path,
+  # so you need to do it manually. For the users scope, it would be:
+  # config.omniauth_path_prefix = '/my_engine/users/auth'
+
+  # ==> Turbolinks configuration
+  # If your app is using Turbolinks, Turbolinks::Controller needs to be included to make redirection work correctly:
+  #
+  # ActiveSupport.on_load(:devise_failure_app) do
+  #   include Turbolinks::Controller
+  # end
+
+  # ==> Configuration for :registerable
+
+  # When set to false, does not sign a user in automatically after their password is
+  # changed. Defaults to true, so a user is signed in automatically after changing a password.
+  # config.sign_in_after_change_password = true
+end
diff --git a/config/initializers/filter_parameter_logging.rb b/config/initializers/filter_parameter_logging.rb
index adc6568..3df77c5 100644
--- a/config/initializers/filter_parameter_logging.rb
+++ b/config/initializers/filter_parameter_logging.rb
@@ -1,8 +1,10 @@
+# frozen_string_literal: true
+
 # Be sure to restart your server when you modify this file.
 
 # Configure parameters to be filtered from the log file. Use this to limit dissemination of
 # sensitive information. See the ActiveSupport::ParameterFilter documentation for supported
 # notations and behaviors.
-Rails.application.config.filter_parameters += [
-  :passw, :secret, :token, :_key, :crypt, :salt, :certificate, :otp, :ssn
+Rails.application.config.filter_parameters += %i[
+  passw secret token _key crypt salt certificate otp ssn
 ]
diff --git a/config/initializers/inflections.rb b/config/initializers/inflections.rb
index 3860f65..6c78420 100644
--- a/config/initializers/inflections.rb
+++ b/config/initializers/inflections.rb
@@ -1,3 +1,4 @@
+# frozen_string_literal: true
 # Be sure to restart your server when you modify this file.
 
 # Add new inflection rules using the following format. Inflections
diff --git a/config/initializers/permissions_policy.rb b/config/initializers/permissions_policy.rb
index 00f64d7..50bcf4e 100644
--- a/config/initializers/permissions_policy.rb
+++ b/config/initializers/permissions_policy.rb
@@ -1,3 +1,4 @@
+# frozen_string_literal: true
 # Define an application-wide HTTP permissions policy. For further
 # information see https://developers.google.com/web/updates/2018/06/feature-policy
 #
diff --git a/config/locales/devise.en.yml b/config/locales/devise.en.yml
new file mode 100644
index 0000000..260e1c4
--- /dev/null
+++ b/config/locales/devise.en.yml
@@ -0,0 +1,65 @@
+# Additional translations at https://github.com/heartcombo/devise/wiki/I18n
+
+en:
+  devise:
+    confirmations:
+      confirmed: "Your email address has been successfully confirmed."
+      send_instructions: "You will receive an email with instructions for how to confirm your email address in a few minutes."
+      send_paranoid_instructions: "If your email address exists in our database, you will receive an email with instructions for how to confirm your email address in a few minutes."
+    failure:
+      already_authenticated: "You are already signed in."
+      inactive: "Your account is not activated yet."
+      invalid: "Invalid %{authentication_keys} or password."
+      locked: "Your account is locked."
+      last_attempt: "You have one more attempt before your account is locked."
+      not_found_in_database: "Invalid %{authentication_keys} or password."
+      timeout: "Your session expired. Please sign in again to continue."
+      unauthenticated: "You need to sign in or sign up before continuing."
+      unconfirmed: "You have to confirm your email address before continuing."
+    mailer:
+      confirmation_instructions:
+        subject: "Confirmation instructions"
+      reset_password_instructions:
+        subject: "Reset password instructions"
+      unlock_instructions:
+        subject: "Unlock instructions"
+      email_changed:
+        subject: "Email Changed"
+      password_change:
+        subject: "Password Changed"
+    omniauth_callbacks:
+      failure: "Could not authenticate you from %{kind} because \"%{reason}\"."
+      success: "Successfully authenticated from %{kind} account."
+    passwords:
+      no_token: "You can't access this page without coming from a password reset email. If you do come from a password reset email, please make sure you used the full URL provided."
+      send_instructions: "You will receive an email with instructions on how to reset your password in a few minutes."
+      send_paranoid_instructions: "If your email address exists in our database, you will receive a password recovery link at your email address in a few minutes."
+      updated: "Your password has been changed successfully. You are now signed in."
+      updated_not_active: "Your password has been changed successfully."
+    registrations:
+      destroyed: "Bye! Your account has been successfully cancelled. We hope to see you again soon."
+      signed_up: "Welcome! You have signed up successfully."
+      signed_up_but_inactive: "You have signed up successfully. However, we could not sign you in because your account is not yet activated."
+      signed_up_but_locked: "You have signed up successfully. However, we could not sign you in because your account is locked."
+      signed_up_but_unconfirmed: "A message with a confirmation link has been sent to your email address. Please follow the link to activate your account."
+      update_needs_confirmation: "You updated your account successfully, but we need to verify your new email address. Please check your email and follow the confirmation link to confirm your new email address."
+      updated: "Your account has been updated successfully."
+      updated_but_not_signed_in: "Your account has been updated successfully, but since your password was changed, you need to sign in again."
+    sessions:
+      signed_in: "Signed in successfully."
+      signed_out: "Signed out successfully."
+      already_signed_out: "Signed out successfully."
+    unlocks:
+      send_instructions: "You will receive an email with instructions for how to unlock your account in a few minutes."
+      send_paranoid_instructions: "If your account exists, you will receive an email with instructions for how to unlock it in a few minutes."
+      unlocked: "Your account has been unlocked successfully. Please sign in to continue."
+  errors:
+    messages:
+      already_confirmed: "was already confirmed, please try signing in"
+      confirmation_period_expired: "needs to be confirmed within %{period}, please request a new one"
+      expired: "has expired, please request a new one"
+      not_found: "not found"
+      not_locked: "was not locked"
+      not_saved:
+        one: "1 error prohibited this %{resource} from being saved:"
+        other: "%{count} errors prohibited this %{resource} from being saved:"
diff --git a/config/locales/devise.ru.yml b/config/locales/devise.ru.yml
new file mode 100644
index 0000000..35c5004
--- /dev/null
+++ b/config/locales/devise.ru.yml
@@ -0,0 +1,93 @@
+
+ru:
+  errors:
+    messages:
+      expired: "устарела. Пожалуйста, запросите новую"
+      not_found: "не найдена"
+      already_confirmed: "уже подтверждена. Пожалуйста, попробуйте войти в систему"
+      not_locked: "не заблокирована"
+      not_saved:
+        one: "%{resource}: сохранение не удалось из-за %{count} ошибки"
+        few: "%{resource}: сохранение не удалось из-за %{count} ошибок"
+        many: "%{resource}: сохранение не удалось из-за %{count} ошибок"
+        other: "%{resource}: сохранение не удалось из-за %{count} ошибки"
+
+  devise:
+    failure:
+      already_authenticated: "Вы уже вошли в систему."
+      unauthenticated: "Вам необходимо войти в систему или зарегистрироваться."
+      unconfirmed: "Вы должны подтвердить вашу учётную запись."
+      locked: "Ваша учётная запись заблокирована."
+      invalid: "Неверный адрес e-mail или пароль."
+      invalid_token: "Неверный ключ аутентификации."
+      timeout: "Ваш сеанс закончился. Пожалуйста, войдите в систему снова."
+      inactive: "Ваша учётная запись ещё не активирована."
+    sessions:
+      signed_in: "Вход в систему выполнен."
+      signed_out: "Выход из системы выполнен."
+    passwords:
+      send_instructions: "В течение нескольких минут вы получите письмо с инструкциями по восстановлению вашего пароля."
+      updated: "Ваш пароль изменён. Теперь вы вошли в систему."
+      updated_not_active: 'Ваш пароль изменен.'
+      send_paranoid_instructions: "Если ваш адрес e-mail есть в нашей базе данных, то в течение нескольких минут вы получите письмо с инструкциями по восстановлению вашего пароля."
+    confirmations:
+      send_instructions: "В течение нескольких минут вы получите письмо с инструкциями по подтверждению вашей учётной записи."
+      send_paranoid_instructions: "Если ваш адрес e-mail есть в нашей базе данных, то в течение нескольких минут вы получите письмо с инструкциями по подтверждению вашей учётной записи."
+      confirmed: "Ваша учётная запись подтверждена. Теперь вы вошли в систему."
+    registrations:
+      signed_up: "Добро пожаловать! Вы успешно зарегистрировались."
+      inactive_signed_up: "Добро пожаловать! Вы успешно зарегистрировались. Но пока вы не можете войти в систему, т.к. ваша учётная запись %{reason}."
+      updated: "Ваша учётная запись изменена."
+      destroyed: "До свидания! Ваша учётная запись удалена. Надеемся снова увидеть вас."
+      reasons:
+        inactive: 'неактивна'
+        unconfirmed: 'не подтверждена'
+        locked: 'заблокирована'
+    unlocks:
+      send_instructions: "В течение нескольких минут вы получите письмо с инструкциями по разблокировке вашей учётной записи."
+      unlocked: "Ваша учётная запись разблокирована. Теперь вы вошли в систему."
+      send_paranoid_instructions: "Если ваша учётная запись существует, то в течение нескольких минут вы получите письмо с инструкциями по её разблокировке."
+    omniauth_callbacks:
+      success: "Вход в систему выполнен с учётной записью из %{kind}."
+      failure: "Вы не можете войти в систему с учётной записью из %{kind}, т.к. \"%{reason}\"."
+    mailer:
+      confirmation_instructions:
+        subject: "Инструкции по подтверждению учётной записи"
+      reset_password_instructions:
+        subject: "Инструкции по восстановлению пароля"
+      unlock_instructions:
+        subject: "Инструкции по разблокировке учётной записи"
+  
+  activerecord:
+    attributes:
+      user:
+        confirmation_sent_at: Дата отправки подтверждения
+        confirmation_token: Токен подтверждения
+        confirmed_at: Дата подтверждения
+        created_at: Дата создания
+        current_password: Текущий пароль
+        current_sign_in_at: Дата текущего входа
+        current_sign_in_ip: IP текущего входа
+        email: Email
+        encrypted_password: Зашифрованный пароль
+        failed_attempts: Неудачные попытки
+        last_sign_in_at: Дата последнего входа
+        last_sign_in_ip: IP последнего входа
+        locked_at: Дата блокировки
+        password: Пароль
+        password_confirmation: Подтверждение пароля
+        remember_created_at: Дата создания запоминания
+        remember_me: Запомнить меня
+        reset_password_sent_at: Дата отправки сброса пароля
+        reset_password_token: Токен сброса пароля
+        sign_in_count: Количество входов
+        unconfirmed_email: Неподтвержденный email
+        unlock_token: Токен разблокировки
+        updated_at: Дата обновления
+    models:
+      user:
+        few: Пользователя
+        many: Пользователей
+        one: Пользователь
+        other: Пользователи
+
diff --git a/config/locales/en.yml b/config/locales/en.yml
index 8ca56fc..f3b9875 100644
--- a/config/locales/en.yml
+++ b/config/locales/en.yml
@@ -1,33 +1,80 @@
-# Files in the config/locales directory are used for internationalization
-# and are automatically loaded by Rails. If you want to use locales other
-# than English, add the necessary files in this directory.
-#
-# To use the locales, use `I18n.t`:
-#
-#     I18n.t "hello"
-#
-# In views, this is aliased to just `t`:
-#
-#     <%= t("hello") %>
-#
-# To use a different locale, set it with `I18n.locale`:
-#
-#     I18n.locale = :es
-#
-# This would use the information in config/locales/es.yml.
-#
-# The following keys must be escaped otherwise they will not be retrieved by
-# the default I18n backend:
-#
-# true, false, on, off, yes, no
-#
-# Instead, surround them with single quotes.
-#
-# en:
-#   "true": "foo"
-#
-# To learn more, please read the Rails Internationalization guide
-# available at https://guides.rubyonrails.org/i18n.html.
 
 en:
-  hello: "Hello world"
+  hello: "Hello"
+  log_out: "Log out"
+  log_in: "Log In"
+  sign_up: "Sign up"
+  sign_in: "Sign In"
+  sign_in_with: "Sign in with %{provider}"
+  sign_up_with: "Sign up with %{provider}"
+  forgot_password: "Forgot your password?"
+  password: "Password"
+  password_confirmation: "Confirm password"
+  current_password: "Current password"
+  remember_me: "Remember me"
+  resend_confirmation_instructions: "Didn't receive confirmation instructions?"
+  resend_unlock_instructions: "Didn't receive unlock instructions?"
+  confirmation: "Confirmation"
+  send_confirmation: "Resend confirmation instructions"
+  confirm_password: "Confirm password"
+  new_password: "New password"
+  change_password: "Change my password"
+  cancel_my_account: "Cancel my account"
+  current_password: "Current password"
+  update: "Update"
+  leave_blank_if_you_don_t_want_to_change_it: "Leave blank if you don't want to change it"
+  show_profile: "Show Profile"
+  edit_profile: "Edit Profile"
+  edit: "Edit"
+  back: "Back"
+  delete: "Delete"
+  friends: "Friends"
+  are_you_sure: "Are you sure?"
+  chat: "Chat"
+  welcome: "Welcome"
+  confirm_account: "You can confirm your account email through the link below:"
+  notify_you_email_changed: "We're contacting you to notify you that your email is being changed to"
+  notify_you_email_has_changed: "We're contacting you to notify you that your email has been changed to"
+  notify_you_password_changed: "We're contacting you to notify you that your password has been changed"
+  link_to_you_password: "Someone has requested a link to change your password. You can do this through the link below."
+  ignore_if_you_did_not_request: "If you didn't request this, please ignore this email. Your password won't change until you access the link above and create a new one."
+  change_my_password: "Change my password"
+  blocked_account: "Your account has been locked due to an excessive number of unsuccessful sign in attempts."
+  click_link_to_unlock: "Click the link below to unlock your account:"
+  chatacters_minimum: "characters minimum"
+  confirm_new_password: "Confirm new password"
+  change_my_password: "Change my password"
+  send_me_resst_instructions: "Send me reset password instructions"
+  profile_picture: "Profile picture"
+  account_details: "Account details"
+  input_avatar: "JPG or PNG no larger than 5 MB"
+  currently_waiting: "Currently waiting confirmation for:"
+  current_password_to_confirm: "we need your current password to confirm your changes"
+  save_changes: "Save changes"
+  sign_up_with_account: "Sign up with"
+  enter_full_name: "Enter your full name"
+  unlock_my_account: 'Unlock my account'
+  search: "Search"
+  location: "Location"
+  since: "Since"
+  full_name: "Full name"
+  friends_requests: "Friends requests"
+  not_have_any_requests: "You haven't got any friends request"
+  maps:
+    accept: "Accept"
+    cancel: "Cancel"
+    close: "Close"
+    decline: "Decline"
+    delete: "Delete"
+    edit: "Edit"
+    save: "Save"
+    name: "Name"
+    email: "Email"
+    action: "Action"
+    my_location: "My location"
+    last_update: "Last time updated %{time} ago"
+    want_to_be_your_friend: "%{name} wants to be your friend"
+    nearest_person: "Find nearest person to you"
+    nearest_firend: "Find nearest friend to you"
+    update_geolocation: "Update geolocation"
+    time_ago: "%{time} ago"
diff --git a/config/locales/followability.en.yml b/config/locales/followability.en.yml
new file mode 100644
index 0000000..532cd0c
--- /dev/null
+++ b/config/locales/followability.en.yml
@@ -0,0 +1,31 @@
+---
+en:
+  followability:
+    errors:
+      block:
+        unblock:
+          myself: 'You can not run this action for yourself'
+        block:
+          myself: 'You can not run this action for yourself'
+          blocked_by: 'You can not block to who blocked to you'
+          already_blocked: '%{klass} already blocked'
+          not_blocked_for_blocking: 'You can not unblock to %{klass} because was not blocked'
+      follow:
+        unfollow:
+          myself: 'You can not run this action for yourself'
+          empty_relation: 'You can not unfollow to %{klass} because was not followed'
+        decline_follow_request_of:
+          myself: 'You can not run this action for yourself'
+          empty_relation: 'You can not decline follow request of %{klass} because was not sent'
+        accept_follow_request_of:
+          myself: 'You can not run this action for yourself'
+          empty_relation: 'You can not accept follow request of %{klass} because was not sent'
+        remove_follow_request_for:
+          empty_relation: 'You can not remove follow request of %{klass} because was not sent'
+          myself: 'You can not run this action for yourself'
+        send_follow_request_to:
+          myself: 'You can not run this action for yourself'
+          blocked_by: 'You can not send follow request to who blocked to you'
+          following: 'You are already following to %{klass}'
+          already_sent: 'You are already sent follow request'
+          blocked: 'You can not send follow request to blocked %{klass}'
diff --git a/config/locales/followability.ru.yml b/config/locales/followability.ru.yml
new file mode 100644
index 0000000..be44658
--- /dev/null
+++ b/config/locales/followability.ru.yml
@@ -0,0 +1,31 @@
+---
+ru:
+  followability:
+    errors:
+      block:
+        unblock:
+          myself: 'Вы не можете выполнить это действие для себя'
+        block:
+          myself: 'Вы не можете выполнить это действие для себя'
+          blocked_by: 'Вы не можете заблокировать того, кто заблокировал вас'
+          already_blocked: '%{klass} уже заблокирован'
+          not_blocked_for_blocking: 'Вы не можете разблокировать %{klass} потому что он не был заблокирован'
+      follow:
+        unfollow:
+          myself: 'Вы не можете выполнить это действие для себя'
+          empty_relation: 'Вы не можете отписаться от %{klass} потому что вы не были подписаны'
+        decline_follow_request_of:
+          myself: 'Вы не можете выполнить это действие для себя'
+          empty_relation: 'Вы не можете отменить запрос %{klass} потому что он не был отправлен'
+        accept_follow_request_of:
+          myself: 'Вы не можете выполнить это действие для себя'
+          empty_relation: 'Вы не можете принять запрос %{klass} потому что он не был отправлен'
+        remove_follow_request_for:
+          empty_relation: 'Вы не можете удалить запрос %{klass} потому что он не был отправлен'
+          myself: 'Вы не можете выполнить это действие для себя'
+        send_follow_request_to:
+          myself: 'Вы не можете выполнить это действие для себя'
+          blocked_by: 'Вы не можете отправить дружеский запрос тому, кто вас заблокировал'
+          following: 'Вы уже подписаны на %{klass}'
+          already_sent: 'Вы уже отправили запрос'
+          blocked: 'Вы не можете отправить запрос заблокированному %{klass}'
diff --git a/config/locales/ru.yml b/config/locales/ru.yml
new file mode 100644
index 0000000..48b5287
--- /dev/null
+++ b/config/locales/ru.yml
@@ -0,0 +1,82 @@
+
+ru:
+  hello: "Здравствуйте"
+  log_out: "Выйти"
+  log_in: "Войти"
+  sign_up: "Зарегистрироваться"
+  sign_in: "Войти"
+  password: "Пароль"
+  password_confirmation: "Подтверждение пароля"
+  current_password: "Текущий пароль"
+  sign_in_with: "Войти с помощью %{provider}"
+  sign_up_with: "Зарегистрироваться с помощью %{provider}"
+  forgot_password: "Забыли пароль?"
+  remember_me: "Запомнить меня"
+  resend_confirmation_instructions: "Не получили инстракцию подтверждения?"
+  resend_unlock_instructions: "Не получили инструкцию по разблокировке?"
+  confirmation: "Подтверждение"
+  send_confirmation: "Повторно отправить инструкции по подтверждению"
+  confirm_password: "Подтвердите пароль"
+  new_password: "Новый пароль"
+  change_password: "Изменить пароль"
+  cancel_my_account: "Удалить мой аккаунт"
+  current_password: "Текущий пароль"
+  update: "Обновить"
+  leave_blank_if_you_don_t_want_to_change_it: "Оставьте поле пустым, если не хотите менять пароль"
+  show_profile: "Показать профиль"
+  edit_profile: "Редактировать профиль"
+  edit: "Редактировать"
+  back: "Назад"
+  delete: "Удалить"
+  friends: "Друзья"
+  are_you_sure: "Вы уверены?"
+  chat: "Общаться"
+  welcome: "Добро пожаловать"
+  confirm_account: "В можете подтвердить свой аккаунт через ссылку, которую мы отправили на вашу почту."
+  notify_you_email_changed: "Мы связались с вами, чтобы сообщить, что ваш адрес электронной почты был изменен на"
+  notify_you_email_has_changed: "Мы связались с вами, чтобы сообщить, что ваш адрес электронной почты был изменен"
+  notify_you_password_changed: "Мы связались с вами, чтобы сообщить, что ваш пароль был изменен"
+  link_to_you_password: "Кто-то запросил ссылку для смены пароля. Вы можете сделать это по ссылке ниже."
+  ignore_if_you_did_not_request: "Если вы это не запрашивали, пожалуйста проигнорируйте. Ваш пароль не измениться пока вы не перейдёте по ссылке выше и создадите новый."
+  change_my_password: "Изменить мой пароль"
+  blocked_account: "Ваша учетная запись заблокирована из-за чрезмерного количества неудачных попыток входа."
+  click_link_to_unlock: "Нажмите на ссылку ниже, чтобы разблокировать свою учетную запись:"
+  chatacters_minimum: "минимальное количество символов"
+  confirm_new_password: "Подтвердите новый пароль"
+  send_me_resst_instructions: "Отправить мне инструкции по сбросу пароля"
+  profile_picture: "Аватар"
+  account_details: "Информация об аккаунте"
+  input_avatar: "JPG или PNG не больше чем 5 MB"
+  currently_waiting: "В настоящее время ожидается подтверждение для:"
+  current_password_to_confirm: "Нам нужен ваш текущий пароль, чтобы подтвердить эти изменения"
+  save_changes: "Сохранить изменения"
+  sign_up_with_account: "Зарегистрироваться с помощью аккаунта"
+  enter_full_name: "Введите полное имя"
+  unlock_my_account: 'Разблокировать мой аккаунт'
+  search: "Искать"
+  location: "Местоположение"
+  since: "Зарегистрирован"
+  full_name: "Полное имя"
+  friends_requests: "Запросы в друзья"
+  not_have_any_requests: "У вас нет запросов на добавление в друзья"
+  accept: "Принять"
+  cancel: "Отменить"
+  decline: "Отклонить"
+  maps:
+    accept: "Принять"
+    cancel: "Отменить"
+    close: "Закрыть"
+    decline: "Отклонить"
+    delete: "Удалить"
+    edit: "Редактировать"
+    save: "Сохранить"
+    name: "Имя"
+    email: "Email"
+    action: "Действие"
+    my_location: "Мое местоположение"
+    last_update: "последний раз был %{time} назад"
+    want_to_be_your_friend: "%{name} хочет добавить вас в друзья"
+    nearest_person: "Ближайший к вам человек"
+    nearest_firend: "Ближайший к вам друг"
+    update_geolocation: "Обновить геолокацию"
+    time_ago: "%{time} назад"
diff --git a/config/puma.rb b/config/puma.rb
index daaf036..1713441 100644
--- a/config/puma.rb
+++ b/config/puma.rb
@@ -1,28 +1,30 @@
+# frozen_string_literal: true
+
 # Puma can serve each request in a thread from an internal thread pool.
 # The `threads` method setting takes two numbers: a minimum and maximum.
 # Any libraries that use thread pools should be configured to match
 # the maximum value specified for Puma. Default is set to 5 threads for minimum
 # and maximum; this matches the default thread size of Active Record.
 #
-max_threads_count = ENV.fetch("RAILS_MAX_THREADS") { 5 }
-min_threads_count = ENV.fetch("RAILS_MIN_THREADS") { max_threads_count }
+max_threads_count = ENV.fetch('RAILS_MAX_THREADS', 5)
+min_threads_count = ENV.fetch('RAILS_MIN_THREADS') { max_threads_count }
 threads min_threads_count, max_threads_count
 
 # Specifies the `worker_timeout` threshold that Puma will use to wait before
 # terminating a worker in development environments.
 #
-worker_timeout 3600 if ENV.fetch("RAILS_ENV", "development") == "development"
+worker_timeout 3600 if ENV.fetch('RAILS_ENV', 'development') == 'development'
 
 # Specifies the `port` that Puma will listen on to receive requests; default is 3000.
 #
-port ENV.fetch("PORT") { 3000 }
+port ENV.fetch('PORT', 3000)
 
 # Specifies the `environment` that Puma will run in.
 #
-environment ENV.fetch("RAILS_ENV") { "development" }
+environment ENV.fetch('RAILS_ENV', 'development')
 
 # Specifies the `pidfile` that Puma will use.
-pidfile ENV.fetch("PIDFILE") { "tmp/pids/server.pid" }
+pidfile ENV.fetch('PIDFILE', 'tmp/pids/server.pid')
 
 # Specifies the number of `workers` to boot in clustered mode.
 # Workers are forked web server processes. If using threads and workers together
diff --git a/config/routes.rb b/config/routes.rb
index b29d7a3..3e412a9 100644
--- a/config/routes.rb
+++ b/config/routes.rb
@@ -1,7 +1,42 @@
+# frozen_string_literal: true
+
 Rails.application.routes.draw do
-  # Define your application routes per the DSL in https://guides.rubyonrails.org/routing.html
-  root "maps#index"
+  root 'maps#index'
+
+  resources :rooms do
+    resources :messages
+  end
+  devise_for :users, controllers: {
+    sessions: 'users/sessions',
+    registrations: 'users/registrations',
+    omniauth_callbacks: 'users/omniauth_callbacks'
+  }
+
+  devise_scope :user do
+    get 'users', to: 'devise/sessions#new'
+  end
+
+  post 'user/:id/', to: 'users#create'
+  post 'user/:id/follow', to: 'users#follow', as: 'follow'
+  post 'user/:id/unfollow', to: 'users#unfollow', as: 'unfollow'
+  post 'user/:id/accept', to: 'users#accept', as: 'accept'
+  post 'user/:id/decline', to: 'users#decline', as: 'decline'
+  post 'user/:id/cancel', to: 'users#cancel', as: 'cancel'
+
+  get 'user/show_user_profile/:id', to: 'users#show_user_profile', as: :show_user_profile
+
+  get 'user/:id', to: 'users#show', as: :user
+
+  get 'maps/index', as: :maps
+  post '/find_nearest', to: 'maps#find_nearest', as: :find_nearest
+  post '/find_nearest_friend', to: 'maps#find_nearest_friend', as: :find_nearest_friend
+  post '/result', to: 'maps#result', as: :result
+  get 'users/show', as: :user_show
+  get 'users/sign_out', as: :user_sign_out
+
+  get 'users/sign_in', as: :user_sign_in
+  get 'users/user_profile', as: :user_profile
+  get 'users/edit', as: :user_edit
 
-  # Defines the root path route ("/")
-  # root "articles#index"
+  resources :users, only: [:index]
 end
diff --git a/db/migrate/20221211150249_devise_create_users.rb b/db/migrate/20221211150249_devise_create_users.rb
new file mode 100644
index 0000000..320e3f1
--- /dev/null
+++ b/db/migrate/20221211150249_devise_create_users.rb
@@ -0,0 +1,46 @@
+# frozen_string_literal: true
+
+class DeviseCreateUsers < ActiveRecord::Migration[7.0]
+  def change
+    create_table :users do |t|
+      ## Database authenticatable
+      t.string :email,              null: false, default: ''
+      t.string :encrypted_password, null: false, default: ''
+
+      ## Recoverable
+      t.string   :reset_password_token
+      t.datetime :reset_password_sent_at
+
+      ## Rememberable
+      t.datetime :remember_created_at
+
+      ## Trackable
+      # t.integer  :sign_in_count, default: 0, null: false
+      # t.datetime :current_sign_in_at
+      # t.datetime :last_sign_in_at
+      # t.string   :current_sign_in_ip
+      # t.string   :last_sign_in_ip
+
+      ## Confirmable
+      # t.string   :confirmation_token
+      # t.datetime :confirmed_at
+      # t.datetime :confirmation_sent_at
+      # t.string   :unconfirmed_email # Only if using reconfirmable
+
+      ## Lockable
+      # t.integer  :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts
+      # t.string   :unlock_token # Only if unlock strategy is :email or :both
+      # t.datetime :locked_at
+
+      t.decimal :latitude, precision: 10, scale: 6
+      t.decimal :longitude, precision: 10, scale: 6
+
+      t.timestamps null: false
+    end
+
+    add_index :users, :email,                unique: true
+    add_index :users, :reset_password_token, unique: true
+    # add_index :users, :confirmation_token,   unique: true
+    # add_index :users, :unlock_token,         unique: true
+  end
+end
diff --git a/db/migrate/20221212103126_add_columns_google.rb b/db/migrate/20221212103126_add_columns_google.rb
new file mode 100644
index 0000000..53b6dd4
--- /dev/null
+++ b/db/migrate/20221212103126_add_columns_google.rb
@@ -0,0 +1,10 @@
+# frozen_string_literal: true
+
+class AddColumnsGoogle < ActiveRecord::Migration[7.0]
+  def change
+    add_column :users, :full_name, :string
+    add_column :users, :uid, :string
+    add_column :users, :avatar_url, :string
+    add_column :users, :provider, :string
+  end
+end
diff --git a/db/migrate/20221215223753_change_email_column.rb b/db/migrate/20221215223753_change_email_column.rb
new file mode 100644
index 0000000..bd8c1e3
--- /dev/null
+++ b/db/migrate/20221215223753_change_email_column.rb
@@ -0,0 +1,7 @@
+# frozen_string_literal: true
+
+class ChangeEmailColumn < ActiveRecord::Migration[7.0]
+  def change
+    change_column :users, :email, :string, default: '', null: true
+  end
+end
diff --git a/db/migrate/20221216163606_create_rooms.rb b/db/migrate/20221216163606_create_rooms.rb
new file mode 100644
index 0000000..b4e09ea
--- /dev/null
+++ b/db/migrate/20221216163606_create_rooms.rb
@@ -0,0 +1,12 @@
+# frozen_string_literal: true
+
+class CreateRooms < ActiveRecord::Migration[7.0]
+  def change
+    create_table :rooms do |t|
+      t.string :name
+      t.boolean :is_private, default: false
+
+      t.timestamps
+    end
+  end
+end
diff --git a/db/migrate/20221216193241_create_messages.rb b/db/migrate/20221216193241_create_messages.rb
new file mode 100644
index 0000000..8f0b586
--- /dev/null
+++ b/db/migrate/20221216193241_create_messages.rb
@@ -0,0 +1,13 @@
+# frozen_string_literal: true
+
+class CreateMessages < ActiveRecord::Migration[7.0]
+  def change
+    create_table :messages do |t|
+      t.references :user, null: false, foreign_key: true
+      t.references :room, null: false, foreign_key: true
+      t.text :body
+
+      t.timestamps
+    end
+  end
+end
diff --git a/db/migrate/20221216212830_create_participants.rb b/db/migrate/20221216212830_create_participants.rb
new file mode 100644
index 0000000..a7ac4d7
--- /dev/null
+++ b/db/migrate/20221216212830_create_participants.rb
@@ -0,0 +1,12 @@
+# frozen_string_literal: true
+
+class CreateParticipants < ActiveRecord::Migration[7.0]
+  def change
+    create_table :participants do |t|
+      t.references :user, null: false, foreign_key: true
+      t.references :room, null: false, foreign_key: true
+
+      t.timestamps
+    end
+  end
+end
diff --git a/db/migrate/20221217192849_create_followability_relationships.rb b/db/migrate/20221217192849_create_followability_relationships.rb
new file mode 100644
index 0000000..7babf15
--- /dev/null
+++ b/db/migrate/20221217192849_create_followability_relationships.rb
@@ -0,0 +1,13 @@
+# frozen_string_literal: true
+
+class CreateFollowabilityRelationships < ActiveRecord::Migration[7.0]
+  def change
+    create_table :followability_relationships do |t|
+      t.belongs_to :followerable, polymorphic: true, null: false
+      t.belongs_to :followable, polymorphic: true, null: false
+      t.integer :status
+
+      t.timestamps
+    end
+  end
+end
diff --git a/db/migrate/20221219123500_make_full_name_not_null.rb b/db/migrate/20221219123500_make_full_name_not_null.rb
new file mode 100644
index 0000000..43c64ad
--- /dev/null
+++ b/db/migrate/20221219123500_make_full_name_not_null.rb
@@ -0,0 +1,7 @@
+# frozen_string_literal: true
+
+class MakeFullNameNotNull < ActiveRecord::Migration[7.0]
+  def change
+    change_column_null :users, :full_name, false
+  end
+end
diff --git a/db/migrate/20221219143524_create_active_storage_tables.active_storage.rb b/db/migrate/20221219143524_create_active_storage_tables.active_storage.rb
new file mode 100644
index 0000000..0c24c0d
--- /dev/null
+++ b/db/migrate/20221219143524_create_active_storage_tables.active_storage.rb
@@ -0,0 +1,61 @@
+# frozen_string_literal: true
+
+# This migration comes from active_storage (originally 20170806125915)
+class CreateActiveStorageTables < ActiveRecord::Migration[5.2]
+  def change
+    # Use Active Record's configured type for primary and foreign keys
+    primary_key_type, foreign_key_type = primary_and_foreign_key_types
+
+    create_table :active_storage_blobs, id: primary_key_type do |t|
+      t.string   :key,          null: false
+      t.string   :filename,     null: false
+      t.string   :content_type
+      t.text     :metadata
+      t.string   :service_name, null: false
+      t.bigint   :byte_size,    null: false
+      t.string   :checksum
+
+      if connection.supports_datetime_with_precision?
+        t.datetime :created_at, precision: 6, null: false
+      else
+        t.datetime :created_at, null: false
+      end
+
+      t.index [:key], unique: true
+    end
+
+    create_table :active_storage_attachments, id: primary_key_type do |t|
+      t.string     :name,     null: false
+      t.references :record,   null: false, polymorphic: true, index: false, type: foreign_key_type
+      t.references :blob,     null: false, type: foreign_key_type
+
+      if connection.supports_datetime_with_precision?
+        t.datetime :created_at, precision: 6, null: false
+      else
+        t.datetime :created_at, null: false
+      end
+
+      t.index %i[record_type record_id name blob_id], name: :index_active_storage_attachments_uniqueness,
+                                                      unique: true
+      t.foreign_key :active_storage_blobs, column: :blob_id
+    end
+
+    create_table :active_storage_variant_records, id: primary_key_type do |t|
+      t.belongs_to :blob, null: false, index: false, type: foreign_key_type
+      t.string :variation_digest, null: false
+
+      t.index %i[blob_id variation_digest], name: :index_active_storage_variant_records_uniqueness, unique: true
+      t.foreign_key :active_storage_blobs, column: :blob_id
+    end
+  end
+
+  private
+
+  def primary_and_foreign_key_types
+    config = Rails.configuration.generators
+    setting = config.options[config.orm][:primary_key_type]
+    primary_key_type = setting || :primary_key
+    foreign_key_type = setting || :bigint
+    [primary_key_type, foreign_key_type]
+  end
+end
diff --git a/db/schema.rb b/db/schema.rb
new file mode 100644
index 0000000..af5738a
--- /dev/null
+++ b/db/schema.rb
@@ -0,0 +1,107 @@
+# frozen_string_literal: true
+
+# This file is auto-generated from the current state of the database. Instead
+# of editing this file, please use the migrations feature of Active Record to
+# incrementally modify your database, and then regenerate this schema definition.
+#
+# This file is the source Rails uses to define your schema when running `bin/rails
+# db:schema:load`. When creating a new database, `bin/rails db:schema:load` tends to
+# be faster and is potentially less error prone than running all of your
+# migrations from scratch. Old migrations may fail to apply correctly if those
+# migrations use external dependencies or application code.
+#
+# It's strongly recommended that you check this file into your version control system.
+
+ActiveRecord::Schema[7.0].define(version: 20_221_219_143_524) do
+  create_table 'active_storage_attachments', force: :cascade do |t|
+    t.string 'name', null: false
+    t.string 'record_type', null: false
+    t.bigint 'record_id', null: false
+    t.bigint 'blob_id', null: false
+    t.datetime 'created_at', null: false
+    t.index ['blob_id'], name: 'index_active_storage_attachments_on_blob_id'
+    t.index %w[record_type record_id name blob_id], name: 'index_active_storage_attachments_uniqueness',
+                                                    unique: true
+  end
+
+  create_table 'active_storage_blobs', force: :cascade do |t|
+    t.string 'key', null: false
+    t.string 'filename', null: false
+    t.string 'content_type'
+    t.text 'metadata'
+    t.string 'service_name', null: false
+    t.bigint 'byte_size', null: false
+    t.string 'checksum'
+    t.datetime 'created_at', null: false
+    t.index ['key'], name: 'index_active_storage_blobs_on_key', unique: true
+  end
+
+  create_table 'active_storage_variant_records', force: :cascade do |t|
+    t.bigint 'blob_id', null: false
+    t.string 'variation_digest', null: false
+    t.index %w[blob_id variation_digest], name: 'index_active_storage_variant_records_uniqueness', unique: true
+  end
+
+  create_table 'followability_relationships', force: :cascade do |t|
+    t.string 'followerable_type', null: false
+    t.integer 'followerable_id', null: false
+    t.string 'followable_type', null: false
+    t.integer 'followable_id', null: false
+    t.integer 'status'
+    t.datetime 'created_at', null: false
+    t.datetime 'updated_at', null: false
+    t.index %w[followable_type followable_id], name: 'index_followability_relationships_on_followable'
+    t.index %w[followerable_type followerable_id], name: 'index_followability_relationships_on_followerable'
+  end
+
+  create_table 'messages', force: :cascade do |t|
+    t.integer 'user_id', null: false
+    t.integer 'room_id', null: false
+    t.text 'body'
+    t.datetime 'created_at', null: false
+    t.datetime 'updated_at', null: false
+    t.index ['room_id'], name: 'index_messages_on_room_id'
+    t.index ['user_id'], name: 'index_messages_on_user_id'
+  end
+
+  create_table 'participants', force: :cascade do |t|
+    t.integer 'user_id', null: false
+    t.integer 'room_id', null: false
+    t.datetime 'created_at', null: false
+    t.datetime 'updated_at', null: false
+    t.index ['room_id'], name: 'index_participants_on_room_id'
+    t.index ['user_id'], name: 'index_participants_on_user_id'
+  end
+
+  create_table 'rooms', force: :cascade do |t|
+    t.string 'name'
+    t.boolean 'is_private', default: false
+    t.datetime 'created_at', null: false
+    t.datetime 'updated_at', null: false
+  end
+
+  create_table 'users', force: :cascade do |t|
+    t.string 'email', default: ''
+    t.string 'encrypted_password', default: '', null: false
+    t.string 'reset_password_token'
+    t.datetime 'reset_password_sent_at'
+    t.datetime 'remember_created_at'
+    t.decimal 'latitude', precision: 10, scale: 6
+    t.decimal 'longitude', precision: 10, scale: 6
+    t.datetime 'created_at', null: false
+    t.datetime 'updated_at', null: false
+    t.string 'full_name', null: false
+    t.string 'uid'
+    t.string 'avatar_url'
+    t.string 'provider'
+    t.index ['email'], name: 'index_users_on_email', unique: true
+    t.index ['reset_password_token'], name: 'index_users_on_reset_password_token', unique: true
+  end
+
+  add_foreign_key 'active_storage_attachments', 'active_storage_blobs', column: 'blob_id'
+  add_foreign_key 'active_storage_variant_records', 'active_storage_blobs', column: 'blob_id'
+  add_foreign_key 'messages', 'rooms'
+  add_foreign_key 'messages', 'users'
+  add_foreign_key 'participants', 'rooms'
+  add_foreign_key 'participants', 'users'
+end
diff --git a/db/seeds.rb b/db/seeds.rb
index bc25fce..0664d1b 100644
--- a/db/seeds.rb
+++ b/db/seeds.rb
@@ -1,3 +1,4 @@
+# frozen_string_literal: true
 # This file should contain all the record creation needed to seed the database with its default values.
 # The data can then be loaded with the bin/rails db:seed command (or created alongside the database with db:setup).
 #
diff --git a/dump.rdb b/dump.rdb
new file mode 100644
index 0000000..ee67c9b
Binary files /dev/null and b/dump.rdb differ
diff --git a/node_modules/.package-lock.json b/node_modules/.package-lock.json
new file mode 100644
index 0000000..803c222
--- /dev/null
+++ b/node_modules/.package-lock.json
@@ -0,0 +1,12 @@
+{
+  "name": "Maply",
+  "lockfileVersion": 2,
+  "requires": true,
+  "packages": {
+    "node_modules/debounce": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/debounce/-/debounce-1.2.1.tgz",
+      "integrity": "sha512-XRRe6Glud4rd/ZGQfiV1ruXSfbvfJedlV9Y6zOlP+2K04vBYiJEte6stfFkCP03aMnY5tsipamumUjL14fofug=="
+    }
+  }
+}
diff --git a/node_modules/debounce/CONTRIBUTORS b/node_modules/debounce/CONTRIBUTORS
new file mode 100644
index 0000000..89d7032
--- /dev/null
+++ b/node_modules/debounce/CONTRIBUTORS
@@ -0,0 +1,13 @@
+Ben Carpenter
+Billy Moon
+Josh Goldberg
+Julian Gruber
+Kristofer Selbekk
+Matt Mueller
+Matthew Mueller
+Nathan Rajlich
+Oleg Pudeyev
+Stephen Mathieson
+TJ Holowaychuk
+suhaotian
+ven
diff --git a/node_modules/debounce/History.md b/node_modules/debounce/History.md
new file mode 100644
index 0000000..ca26ba5
--- /dev/null
+++ b/node_modules/debounce/History.md
@@ -0,0 +1,55 @@
+
+1.2.1 / 2021-03-09
+==================
+
+  * Add CONTRIBUTORS and MIT LICENSE file. (#28)
+
+1.2.0 / 2018-08-14
+==================
+
+  * Added a .debounce member to debounce (#21)
+
+1.1.0 / 2017-10-30
+==================
+
+  * Ability to force execution (#16)
+
+1.0.2 / 2017-04-21
+==================
+
+ * Fixes #3 - Debounced function executing early? (#15)
+ * Merge pull request #13 from selbekk/master
+ * Remove date-now from package.json
+ * Remove date-now dependency from component.json
+ * Remove date-now usage
+
+1.0.1 / 2016-07-25
+==================
+
+ * add ability to clear timer (#10)
+
+1.0.0 / 2014-06-21
+==================
+
+ * Readme: attribute underscore.js in the License section
+ * index: rewrite to use underscore.js' implementation (#2, @TooTallNate)
+ * component, package: add "date-now" as a dependency
+ * test: fix test
+ * component, package: add "keywords" array
+ * package: adjust "description"
+ * package: added "repository" field (#1, @juliangruber)
+
+0.0.3 / 2013-08-21
+==================
+
+ * immediate now defaults to `false`
+
+0.0.2 / 2013-07-27
+==================
+
+ * consolidated with TJ's debounce
+
+0.0.1 / 2012-11-5
+==================
+
+ * Initial release
diff --git a/node_modules/debounce/LICENSE b/node_modules/debounce/LICENSE
new file mode 100644
index 0000000..5a4d942
--- /dev/null
+++ b/node_modules/debounce/LICENSE
@@ -0,0 +1,21 @@
+MIT License
+
+Copyright (c) 2012-2018 The Debounce Contributors. See CONTRIBUTORS.
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
diff --git a/node_modules/debounce/Makefile b/node_modules/debounce/Makefile
new file mode 100644
index 0000000..0f14dac
--- /dev/null
+++ b/node_modules/debounce/Makefile
@@ -0,0 +1,11 @@
+
+build: components index.js
+	@component build --dev
+
+components: component.json
+	@component install --dev
+
+clean:
+	rm -fr build components template.js
+
+.PHONY: clean
diff --git a/node_modules/debounce/Readme.md b/node_modules/debounce/Readme.md
new file mode 100644
index 0000000..8639f0b
--- /dev/null
+++ b/node_modules/debounce/Readme.md
@@ -0,0 +1,69 @@
+
+# debounce
+
+  Useful for implementing behavior that should only happen after a repeated
+  action has completed.
+
+## Installation
+
+    $ component install component/debounce
+
+  Or in node:
+
+    $ npm install debounce
+
+## Example
+
+```js
+var debounce = require('debounce');
+window.onresize = debounce(resize, 200);
+
+function resize(e) {
+  console.log('height', window.innerHeight);
+  console.log('width', window.innerWidth);
+}
+```
+
+To later clear the timer and cancel currently scheduled executions:
+```
+window.onresize.clear();
+```
+
+To execute any pending invocations and reset the timer:
+```
+window.onresize.flush();
+```
+
+Alternately, if using newer syntax:
+
+```js
+import { debounce } from "debounce";
+```
+
+## API
+
+### debounce(fn, wait, [ immediate || false ])
+
+  Creates and returns a new debounced version of the passed function that
+  will postpone its execution until after wait milliseconds have elapsed
+  since the last time it was invoked.
+
+  Pass `true` for the `immediate` parameter to cause debounce to trigger
+  the function on the leading edge instead of the trailing edge of the wait
+  interval. Useful in circumstances like preventing accidental double-clicks
+  on a "submit" button from firing a second time.
+
+  The debounced function returned has a property 'clear' that is a 
+  function that will clear any scheduled future executions of your function.
+
+  The debounced function returned has a property 'flush' that is a 
+  function that will immediately execute the function if and only if execution is scheduled,
+  and reset the execution timer for subsequent invocations of the debounced
+  function.
+
+## License
+
+  MIT
+
+  Original implementation is from [`underscore.js`](http://underscorejs.org/)
+  which also has an MIT license.
diff --git a/node_modules/debounce/component.json b/node_modules/debounce/component.json
new file mode 100644
index 0000000..0ef2236
--- /dev/null
+++ b/node_modules/debounce/component.json
@@ -0,0 +1,18 @@
+{
+  "name": "debounce",
+  "repo": "component/debounce",
+  "description": "Creates and returns a new debounced version of the passed function that will postpone its execution until after wait milliseconds have elapsed since the last time it was invoked",
+  "version": "1.2.1",
+  "main": "index.js",
+  "scripts": [
+    "index.js"
+  ],
+  "keywords": [
+    "function",
+    "throttle",
+    "invoke"
+  ],
+  "dependencies": {},
+  "development": {},
+  "license": "MIT"
+}
diff --git a/node_modules/debounce/index.js b/node_modules/debounce/index.js
new file mode 100644
index 0000000..4f35c12
--- /dev/null
+++ b/node_modules/debounce/index.js
@@ -0,0 +1,70 @@
+/**
+ * Returns a function, that, as long as it continues to be invoked, will not
+ * be triggered. The function will be called after it stops being called for
+ * N milliseconds. If `immediate` is passed, trigger the function on the
+ * leading edge, instead of the trailing. The function also has a property 'clear' 
+ * that is a function which will clear the timer to prevent previously scheduled executions. 
+ *
+ * @source underscore.js
+ * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
+ * @param {Function} function to wrap
+ * @param {Number} timeout in ms (`100`)
+ * @param {Boolean} whether to execute at the beginning (`false`)
+ * @api public
+ */
+function debounce(func, wait, immediate){
+  var timeout, args, context, timestamp, result;
+  if (null == wait) wait = 100;
+
+  function later() {
+    var last = Date.now() - timestamp;
+
+    if (last < wait && last >= 0) {
+      timeout = setTimeout(later, wait - last);
+    } else {
+      timeout = null;
+      if (!immediate) {
+        result = func.apply(context, args);
+        context = args = null;
+      }
+    }
+  };
+
+  var debounced = function(){
+    context = this;
+    args = arguments;
+    timestamp = Date.now();
+    var callNow = immediate && !timeout;
+    if (!timeout) timeout = setTimeout(later, wait);
+    if (callNow) {
+      result = func.apply(context, args);
+      context = args = null;
+    }
+
+    return result;
+  };
+
+  debounced.clear = function() {
+    if (timeout) {
+      clearTimeout(timeout);
+      timeout = null;
+    }
+  };
+  
+  debounced.flush = function() {
+    if (timeout) {
+      result = func.apply(context, args);
+      context = args = null;
+      
+      clearTimeout(timeout);
+      timeout = null;
+    }
+  };
+
+  return debounced;
+};
+
+// Adds compatibility for ES modules
+debounce.debounce = debounce;
+
+module.exports = debounce;
diff --git a/node_modules/debounce/package.json b/node_modules/debounce/package.json
new file mode 100644
index 0000000..70d1466
--- /dev/null
+++ b/node_modules/debounce/package.json
@@ -0,0 +1,27 @@
+{
+  "name": "debounce",
+  "description": "Creates and returns a new debounced version of the passed function that will postpone its execution until after wait milliseconds have elapsed since the last time it was invoked",
+  "version": "1.2.1",
+  "repository": "git://github.com/component/debounce",
+  "main": "index.js",
+  "scripts": {
+    "test": "minijasminenode test.js"
+  },
+  "license": "MIT",
+  "keywords": [
+    "function",
+    "throttle",
+    "invoke"
+  ],
+  "devDependencies": {
+    "minijasminenode": "^1.1.1",
+    "sinon": "^1.17.7",
+    "mocha": "*",
+    "should": "*"
+  },
+  "component": {
+    "scripts": {
+      "debounce/index.js": "index.js"
+    }
+  }
+}
diff --git a/node_modules/debounce/test.html b/node_modules/debounce/test.html
new file mode 100644
index 0000000..c5e2681
--- /dev/null
+++ b/node_modules/debounce/test.html
@@ -0,0 +1,32 @@
+<html>
+<head>
+  <title>Debounce Component</title>
+</head>
+<body>
+  Resize the window!
+  <br>
+  <a id='cancel' href='#'>Cancel Print</a>
+  <br>
+  <a id='now' href='#'>Print Now</a>
+
+  <script src="build/build.js" type="text/javascript"></script>
+  <script type="text/javascript">
+    var debounce = require('debounce');
+    window.onresize = debounce(resize, 2000);
+
+    document.getElementById('cancel').onclick = window.onresize.clear;
+
+    document.getElementById('now').onclick = printNow;
+
+    function resize(e) {
+      console.log('height', window.innerHeight);
+      console.log('width', window.innerWidth);
+    }
+
+    function printNow(e) {
+      window.onresize.clear();
+      resize();
+    }
+  </script>
+</body>
+</html>
diff --git a/node_modules/debounce/test.js b/node_modules/debounce/test.js
new file mode 100644
index 0000000..f2890e8
--- /dev/null
+++ b/node_modules/debounce/test.js
@@ -0,0 +1,170 @@
+var debounce = require('.')
+var sinon = require('sinon')
+
+describe('housekeeping', function() {
+  it('should be defined as a function', function() {
+    expect(typeof debounce).toEqual('function')
+  })
+})
+
+describe('catch issue #3 - Debounced function executing early?', function() {
+
+  // use sinon to control the clock
+  var clock
+
+  beforeEach(function(){
+    clock = sinon.useFakeTimers()
+  })
+
+  afterEach(function(){
+    clock.restore()
+  })
+
+  it('should debounce with fast timeout', function() {
+
+    var callback = sinon.spy()
+
+    // set up debounced function with wait of 100
+    var fn = debounce(callback, 100)
+
+    // call debounced function at interval of 50
+    setTimeout(fn, 100)
+    setTimeout(fn, 150)
+    setTimeout(fn, 200)
+    setTimeout(fn, 250)
+
+    // set the clock to 100 (period of the wait) ticks after the last debounced call
+    clock.tick(350)
+
+    // the callback should have been triggered once
+    expect(callback.callCount).toEqual(1)
+
+  })
+
+})
+
+describe('forcing execution', function() {
+
+  // use sinon to control the clock
+  var clock
+
+  beforeEach(function(){
+    clock = sinon.useFakeTimers()
+  })
+
+  afterEach(function(){
+    clock.restore()
+  })
+
+  it('should not execute prior to timeout', function() {
+
+    var callback = sinon.spy()
+
+    // set up debounced function with wait of 100
+    var fn = debounce(callback, 100)
+
+    // call debounced function at interval of 50
+    setTimeout(fn, 100)
+    setTimeout(fn, 150)
+
+    // set the clock to 25 (period of the wait) ticks after the last debounced call
+    clock.tick(175)
+
+    // the callback should not have been called yet
+    expect(callback.callCount).toEqual(0)
+
+  })
+
+  it('should execute prior to timeout when flushed', function() {
+
+    var callback = sinon.spy()
+
+    // set up debounced function with wait of 100
+    var fn = debounce(callback, 100)
+
+    // call debounced function at interval of 50
+    setTimeout(fn, 100)
+    setTimeout(fn, 150)
+
+    // set the clock to 25 (period of the wait) ticks after the last debounced call
+    clock.tick(175)
+    
+    fn.flush()
+
+    // the callback has been called
+    expect(callback.callCount).toEqual(1)
+
+  })
+
+  it('should not execute again after timeout when flushed before the timeout', function() {
+
+    var callback = sinon.spy()
+
+    // set up debounced function with wait of 100
+    var fn = debounce(callback, 100)
+
+    // call debounced function at interval of 50
+    setTimeout(fn, 100)
+    setTimeout(fn, 150)
+
+    // set the clock to 25 (period of the wait) ticks after the last debounced call
+    clock.tick(175)
+    
+    fn.flush()
+    
+    // the callback has been called here
+    expect(callback.callCount).toEqual(1)
+    
+    // move to past the timeout
+    clock.tick(225)
+
+    // the callback should have only been called once
+    expect(callback.callCount).toEqual(1)
+
+  })
+
+  it('should not execute on a timer after being flushed', function() {
+
+    var callback = sinon.spy()
+
+    // set up debounced function with wait of 100
+    var fn = debounce(callback, 100)
+
+    // call debounced function at interval of 50
+    setTimeout(fn, 100)
+    setTimeout(fn, 150)
+
+    // set the clock to 25 (period of the wait) ticks after the last debounced call
+    clock.tick(175)
+    
+    fn.flush()
+    
+    // the callback has been called here
+    expect(callback.callCount).toEqual(1)
+    
+    // schedule again
+    setTimeout(fn, 250)
+    
+    // move to past the new timeout
+    clock.tick(400)
+
+    // the callback should have been called again
+    expect(callback.callCount).toEqual(2)
+
+  })
+
+  it('should not execute when flushed if nothing was scheduled', function() {
+
+    var callback = sinon.spy()
+
+    // set up debounced function with wait of 100
+    var fn = debounce(callback, 100)
+
+    fn.flush()
+    
+    // the callback should not have been called
+    expect(callback.callCount).toEqual(0)
+
+  })
+
+})
diff --git a/package-lock.json b/package-lock.json
new file mode 100644
index 0000000..9cc1a16
--- /dev/null
+++ b/package-lock.json
@@ -0,0 +1,24 @@
+{
+  "name": "Maply",
+  "lockfileVersion": 2,
+  "requires": true,
+  "packages": {
+    "": {
+      "dependencies": {
+        "debounce": "^1.2.1"
+      }
+    },
+    "node_modules/debounce": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/debounce/-/debounce-1.2.1.tgz",
+      "integrity": "sha512-XRRe6Glud4rd/ZGQfiV1ruXSfbvfJedlV9Y6zOlP+2K04vBYiJEte6stfFkCP03aMnY5tsipamumUjL14fofug=="
+    }
+  },
+  "dependencies": {
+    "debounce": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/debounce/-/debounce-1.2.1.tgz",
+      "integrity": "sha512-XRRe6Glud4rd/ZGQfiV1ruXSfbvfJedlV9Y6zOlP+2K04vBYiJEte6stfFkCP03aMnY5tsipamumUjL14fofug=="
+    }
+  }
+}
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..7967b45
--- /dev/null
+++ b/package.json
@@ -0,0 +1,5 @@
+{
+  "dependencies": {
+    "debounce": "^1.2.1"
+  }
+}
diff --git a/spec/models/user_spec.rb b/spec/models/user_spec.rb
new file mode 100644
index 0000000..7bc6622
--- /dev/null
+++ b/spec/models/user_spec.rb
@@ -0,0 +1,110 @@
+# frozen_string_literal: true
+
+require 'rails_helper'
+
+RSpec.describe User, type: :model do
+  let(:email_user) { 'oleg-nsk@mail.ru' }
+  let(:password_user) { 'ts6GwTyLCzEYNmG' }
+  let(:full_name) { 'Ivan Pogiba' }
+  describe 'Manipulating with model User' do
+    it 'create User and check valid' do
+      user = User.create(email: email_user, password: password_user, password_confirmation: password_user,
+                         full_name: full_name)
+      expect(user).to be_valid
+    end
+
+    it 'create User and check invalid' do
+      user = User.create(email: email_user, password: password_user, password_confirmation: "#{password_user}1",
+                         full_name: full_name)
+      expect(user).to be_invalid
+    end
+
+    it 'create new User without params and try to save it' do
+      expect(User.create.save).to be_falsey
+    end
+
+    it 'create new User and try to find it' do
+      user = User.create(email: email_user, password: password_user, password_confirmation: password_user,
+                         full_name: full_name)
+      expect(User.find_by(email: email_user)).to eq(user)
+    end
+
+    it 'create new User and try to find it by id' do
+      user = User.create(email: email_user, password: password_user, password_confirmation: password_user,
+                         full_name: full_name)
+      expect(User.find_by(id: user.id)).to eq(user)
+    end
+
+    it 'create new User and try to find it by full_name' do
+      user = User.create(email: email_user, password: password_user, password_confirmation: password_user,
+                         full_name: full_name)
+      expect(User.find_by(full_name: full_name)).to eq(user)
+    end
+  end
+
+  describe 'Manipulating with followability' do
+    let(:user1) do
+      User.create(email: 'oleg-nsk@mail.ru', password: 'ts6GwTyLCzEYNmG', password_confirmation: 'ts6GwTyLCzEYNmG',
+                  full_name: 'Ivan Pogiba')
+    end
+    let(:user2) do
+      User.create(email: 'pogibuskaivan@gmail.com', password: 'ts6GwTyLCzEYNmG', password_confirmation: 'ts6GwTyLCzEYNmG',
+                  full_name: 'Oleg')
+    end
+    it 'create new User and try to follow another User' do
+      user1.send_follow_request_to(user2)
+      expect(user1.following?(user2)).to be_falsey
+    end
+
+    it 'accept follow request from another User' do
+      user1.send_follow_request_to(user2)
+      user2.accept_follow_request_of(user1)
+      expect(user1.following?(user2)).to be_truthy
+    end
+
+    it 'unfollow another User' do
+      user1.send_follow_request_to(user2)
+      user1.remove_follow_request_for(user2)
+      expect(user1.following?(user2)).to be_falsey
+    end
+
+    it 'decline follow request from another User' do
+      user1.send_follow_request_to(user2)
+      user2.decline_follow_request_of(user1)
+      expect(user1.following?(user2)).to be_falsey
+    end
+
+    it 'check mutual following' do
+      user1.send_follow_request_to(user2)
+      user2.send_follow_request_to(user1)
+      user1.accept_follow_request_of(user2)
+      user2.accept_follow_request_of(user1)
+      expect(user1.mutual_following_with?(user2)).to be_truthy
+    end
+  end
+
+  describe 'Manipulating with rooms' do
+    let(:user1) do
+      User.create(email: 'oleg-nsk@mail.ru', password: 'ts6GwTyLCzEYNmG', password_confirmation: 'ts6GwTyLCzEYNmG',
+                  full_name: 'Ivan Pogiba')
+    end
+    let(:user2) do
+      User.create(email: 'pogibuskaivan@gmail.com', password: 'ts6GwTyLCzEYNmG', password_confirmation: 'ts6GwTyLCzEYNmG',
+                  full_name: 'Oleg Pogiba')
+    end
+    let(:room) { Room.create(name: 'room1') }
+
+    it 'create private room and check if users are participants' do
+      private_room = Room.create_private_room([user1, user2], 'room1')
+      expect(private_room.participant?(private_room, user1)).to be_truthy
+      expect(private_room.participant?(private_room, user2)).to be_truthy
+    end
+
+    it 'create private room and check if users are not participants' do
+      user3 = User.create(email: 'pogiba@yandex.ru', password: '123456', password_confirmation: '123456',
+                          full_name: 'Indiana Johns')
+      private_room = Room.create_private_room([user1, user2], 'room1')
+      expect(private_room.participant?(private_room, user3)).to be_falsey
+    end
+  end
+end
diff --git a/spec/rails_helper.rb b/spec/rails_helper.rb
new file mode 100644
index 0000000..e5f0cf4
--- /dev/null
+++ b/spec/rails_helper.rb
@@ -0,0 +1,72 @@
+# frozen_string_literal: true
+
+# This file is copied to spec/ when you run 'rails generate rspec:install'
+require 'spec_helper'
+ENV['RAILS_ENV'] ||= 'test'
+require_relative '../config/environment'
+# Prevent database truncation if the environment is production
+abort('The Rails environment is running in production mode!') if Rails.env.production?
+require 'rspec/rails'
+# Add additional requires below this line. Rails is not loaded until this point!
+
+# Requires supporting ruby files with custom matchers and macros, etc, in
+# spec/support/ and its subdirectories. Files matching `spec/**/*_spec.rb` are
+# run as spec files by default. This means that files in spec/support that end
+# in _spec.rb will both be required and run as specs, causing the specs to be
+# run twice. It is recommended that you do not name files matching this glob to
+# end with _spec.rb. You can configure this pattern with the --pattern
+# option on the command line or in ~/.rspec, .rspec or `.rspec-local`.
+#
+# The following line is provided for convenience purposes. It has the downside
+# of increasing the boot-up time by auto-requiring all files in the support
+# directory. Alternatively, in the individual `*_spec.rb` files, manually
+# require only the support files necessary.
+#
+# Dir[Rails.root.join('spec', 'support', '**', '*.rb')].sort.each { |f| require f }
+
+# Checks for pending migrations and applies them before tests are run.
+# If you are not using ActiveRecord, you can remove these lines.
+begin
+  ActiveRecord::Migration.maintain_test_schema!
+rescue ActiveRecord::PendingMigrationError => e
+  abort e.to_s.strip
+end
+RSpec.configure do |config|
+  # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures
+  config.fixture_path = "#{::Rails.root}/spec/fixtures"
+
+  # If you're not using ActiveRecord, or you'd prefer not to run each of your
+  # examples within a transaction, remove the following line or assign false
+  # instead of true.
+  config.use_transactional_fixtures = true
+
+  # You can uncomment this line to turn off ActiveRecord support entirely.
+  # config.use_active_record = false
+
+  # RSpec Rails can automatically mix in different behaviours to your tests
+  # based on their file location, for example enabling you to call `get` and
+  # `post` in specs under `spec/controllers`.
+  #
+  # You can disable this behaviour by removing the line below, and instead
+  # explicitly tag your specs with their type, e.g.:
+  #
+  #     RSpec.describe UsersController, type: :controller do
+  #       # ...
+  #     end
+  #
+  # The different available types are documented in the features, such as in
+  # https://relishapp.com/rspec/rspec-rails/docs
+  config.infer_spec_type_from_file_location!
+
+  # Filter lines from Rails gems in backtraces.
+  config.filter_rails_from_backtrace!
+  # arbitrary gems may also be filtered via:
+  # config.filter_gems_from_backtrace("gem name")
+
+  Shoulda::Matchers.configure do |config|
+    config.integrate do |with|
+      with.test_framework :rspec
+      with.library :rails
+    end
+  end
+end
diff --git a/spec/spec_helper.rb b/spec/spec_helper.rb
new file mode 100644
index 0000000..d4eae34
--- /dev/null
+++ b/spec/spec_helper.rb
@@ -0,0 +1,98 @@
+# frozen_string_literal: true
+
+# This file was generated by the `rails generate rspec:install` command. Conventionally, all
+# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
+# The generated `.rspec` file contains `--require spec_helper` which will cause
+# this file to always be loaded, without a need to explicitly require it in any
+# files.
+#
+# Given that it is always loaded, you are encouraged to keep this file as
+# light-weight as possible. Requiring heavyweight dependencies from this file
+# will add to the boot time of your test suite on EVERY test run, even for an
+# individual file that may not need all of that loaded. Instead, consider making
+# a separate helper file that requires the additional dependencies and performs
+# the additional setup, and require it from the spec files that actually need
+# it.
+#
+# See https://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
+RSpec.configure do |config|
+  # rspec-expectations config goes here. You can use an alternate
+  # assertion/expectation library such as wrong or the stdlib/minitest
+  # assertions if you prefer.
+  # config.before(:each, js: true) do
+  #   Capybara.page.driver.browser.manage.window.maximize
+  # end
+
+  config.expect_with :rspec do |expectations|
+    # This option will default to `true` in RSpec 4. It makes the `description`
+    # and `failure_message` of custom matchers include text for helper methods
+    # defined using `chain`, e.g.:
+    #     be_bigger_than(2).and_smaller_than(4).description
+    #     # => "be bigger than 2 and smaller than 4"
+    # ...rather than:
+    #     # => "be bigger than 2"
+    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
+  end
+
+  # rspec-mocks config goes here. You can use an alternate test double
+  # library (such as bogus or mocha) by changing the `mock_with` option here.
+  config.mock_with :rspec do |mocks|
+    # Prevents you from mocking or stubbing a method that does not exist on
+    # a real object. This is generally recommended, and will default to
+    # `true` in RSpec 4.
+    mocks.verify_partial_doubles = true
+  end
+
+  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
+  # have no way to turn it off -- the option exists only for backwards
+  # compatibility in RSpec 3). It causes shared context metadata to be
+  # inherited by the metadata hash of host groups and examples, rather than
+  # triggering implicit auto-inclusion in groups with matching metadata.
+  config.shared_context_metadata_behavior = :apply_to_host_groups
+
+  # The settings below are suggested to provide a good initial experience
+  # with RSpec, but feel free to customize to your heart's content.
+  #   # This allows you to limit a spec run to individual examples or groups
+  #   # you care about by tagging them with `:focus` metadata. When nothing
+  #   # is tagged with `:focus`, all examples get run. RSpec also provides
+  #   # aliases for `it`, `describe`, and `context` that include `:focus`
+  #   # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
+  #   config.filter_run_when_matching :focus
+  #
+  #   # Allows RSpec to persist some state between runs in order to support
+  #   # the `--only-failures` and `--next-failure` CLI options. We recommend
+  #   # you configure your source control system to ignore this file.
+  #   config.example_status_persistence_file_path = "spec/examples.txt"
+  #
+  #   # Limits the available syntax to the non-monkey patched syntax that is
+  #   # recommended. For more details, see:
+  #   # https://relishapp.com/rspec/rspec-core/docs/configuration/zero-monkey-patching-mode
+  #   config.disable_monkey_patching!
+  #
+  #   # Many RSpec users commonly either run the entire suite or an individual
+  #   # file, and it's useful to allow more verbose output when running an
+  #   # individual spec file.
+  #   if config.files_to_run.one?
+  #     # Use the documentation formatter for detailed output,
+  #     # unless a formatter has already been configured
+  #     # (e.g. via a command-line flag).
+  #     config.default_formatter = "doc"
+  #   end
+  #
+  #   # Print the 10 slowest examples and example groups at the
+  #   # end of the spec run, to help surface which specs are running
+  #   # particularly slow.
+  #   config.profile_examples = 10
+  #
+  #   # Run specs in random order to surface order dependencies. If you find an
+  #   # order dependency and want to debug it, you can fix the order by providing
+  #   # the seed, which is printed after each run.
+  #   #     --seed 1234
+  #   config.order = :random
+  #
+  #   # Seed global randomization in this process using the `--seed` CLI option.
+  #   # Setting this allows you to use `--seed` to deterministically reproduce
+  #   # test failures related to randomization by passing the same `--seed` value
+  #   # as the one that triggered the failure.
+  #   Kernel.srand config.seed
+end
diff --git a/spec/system/user_spec.rb b/spec/system/user_spec.rb
new file mode 100644
index 0000000..22d8ae9
--- /dev/null
+++ b/spec/system/user_spec.rb
@@ -0,0 +1,265 @@
+# frozen_string_literal: true
+
+require 'spec_helper'
+require 'rails_helper'
+
+RSpec.describe Devise, type: :system do
+  let(:email_user) { 'kochka_pochka@mail.ru' }
+  let(:password_user) { 'rijqjr;3rewmnrwea' }
+  let(:full_name) { 'Ivan Smallgiba' }
+
+  describe 'User sign up' do
+    scenario 'sign up without params' do
+      visit new_user_registration_path
+      click_button 'Sign up'
+      expect(page).to have_content("errors prohibited this user from being saved:\nEmail can't be blank\nPassword can't be blank\n")
+    end
+
+    scenario 'sign up without email' do
+      visit new_user_registration_path
+      fill_in 'Password', with: password_user
+      fill_in 'Password confirmation', with: password_user
+      click_button 'Sign up'
+      expect(page).to have_content("4 errors prohibited this user from being saved:\nEmail can't be blank\n")
+    end
+
+    scenario 'sign up without password' do
+      visit new_user_registration_path
+      fill_in 'email-input', with: email_user, wait: 10
+      fill_in 'Password confirmation', with: password_user
+      click_button 'Sign up'
+      expect(page).to have_content("Password confirmation doesn't match Password\n")
+    end
+
+    scenario 'sign up, but password confirmation does not match password' do
+      visit new_user_registration_path
+      fill_in 'email-input', with: email_user, wait: 10
+      fill_in 'Password', with: password_user
+      fill_in 'Password confirmation', with: "#{password_user}1"
+      click_button 'Sign up'
+      expect(page).to have_content("Password confirmation doesn't match Password\n")
+    end
+
+    scenario 'sign up with correct params' do
+      visit new_user_registration_path
+      fill_in 'email-input', with: email_user, wait: 10
+      fill_in 'password-input', with: password_user, wait: 10
+      fill_in 'Password confirmation', with: password_user
+      fill_in 'Full name', with: full_name
+      click_button 'Sign up'
+      expect(page).to have_content("Welcome! You have signed up successfully.\n")
+    end
+  end
+
+  describe 'User Sign In' do
+    before :each do
+      visit new_user_registration_path
+      fill_in 'email-input', with: email_user, wait: 10
+      fill_in 'password-input', with: password_user, wait: 10
+      fill_in 'Password confirmation', with: password_user
+      fill_in 'Full name', with: full_name
+      click_button 'Sign up'
+      find('#log_out').click
+    end
+
+    scenario 'sign in without params' do
+      click_button 'Sign In'
+      expect(page).to have_content("Invalid Email or password.\n")
+    end
+
+    scenario 'sign in with params' do
+      fill_in 'email-input', with: email_user, wait: 10
+      fill_in 'password-input', with: password_user, wait: 10
+      click_button 'Sign In'
+      expect(page).to have_content("Signed in successfully.\n")
+    end
+  end
+
+  describe 'User page navigation' do
+    before :each do
+      visit new_user_registration_path
+      fill_in 'email-input', with: email_user, wait: 10
+      fill_in 'password-input', with: password_user, wait: 10
+      fill_in 'Password confirmation', with: password_user
+      fill_in 'Full name', with: full_name
+      click_button 'Sign up'
+    end
+
+    scenario 'Navigation panel' do
+      find('#show_profile').click
+      expect(current_path) == user_profile_path
+      find('#chat').click
+      expect(current_path) == '/rooms'
+      find('#root').click
+      expect(current_path) == root_path
+    end
+  end
+
+  describe 'Interaction between of two users' do
+    let(:user_one) do
+      User.create(email: 'kochka_pochka@mail.ru', password: 'rijqjr;3rewmnrwea', full_name: 'Zatochka Pochka')
+    end
+    let(:user_two) do
+      User.create(email: 'ivan_sobachka_tachka@gmail.ru', password: 'Nn;kgwJKBmnvsdBHJfs', full_name: 'Ivan Smallgiba')
+    end
+    let(:message) { 'Hello!' }
+
+    def user_sign_in(user)
+      sleep(5)
+      visit new_user_session_path
+      fill_in 'email-input', with: user.email, wait: 10
+      fill_in 'password-input', with: user.password, wait: 10
+      click_button 'Sign In'
+    end
+
+    def reload_page
+      visit current_path
+    end
+
+    before :each do
+      user_sign_in(user_two)
+      page.driver.browser.manage.window.resize_to(1920, 1080)
+      Capybara.default_max_wait_time = 10
+    end
+
+    scenario 'Visit Show Profile' do
+      visit user_profile_path
+      expect(page).to have_content(user_two.full_name)
+      expect(page).to have_content(user_two.email)
+      expect(page).to have_content("You haven't got any friends request")
+    end
+
+    scenario 'Click on find nearest person' do
+      sleep(5)
+      click_button 'Find nearest person to you'
+      expect(page).to have_content(user_one.email)
+      expect(page).to have_button('Add')
+    end
+
+    scenario 'Find and add user_one' do
+      fill_in 'Search user', with: user_one.full_name
+      click_on 'Search'
+      expect(page).to have_button('Add')
+    end
+
+    scenario 'Another user add user_one' do
+      fill_in 'Search user', with: user_one.full_name
+      click_on 'Search'
+      click_link 'Log out'
+      expect(current_path) == :user_sign_in
+      user_sign_in(user_one)
+      fill_in 'Search user', with: user_two.full_name
+      click_on 'Search'
+      click_on 'Add'
+      expect(page).to have_button('Cancel')
+    end
+
+    scenario 'User_one accept user_two' do
+      fill_in 'Search user', with: user_one.full_name
+      click_on 'Search'
+      click_on 'Add'
+      find('#log_out').click
+      expect(current_path) == :user_sign_in
+      user_sign_in(user_one)
+      expect(page).to have_content(user_one.full_name)
+      click_on 'Accept'
+    end
+
+    scenario 'User_one accept user_two in Show profile' do
+      fill_in 'Search user', with: user_one.full_name, wait: 10
+      click_on 'Search'
+      click_on 'Add'
+      sleep(5)
+      find('#log_out').click
+      expect(current_path) == :user_sign_in
+      user_sign_in(user_one)
+      sleep(5)
+      find('#show_profile').click
+      expect(page).to have_content(user_one.full_name)
+      click_button 'Accept'
+      expect(page).to have_content(user_one.full_name)
+    end
+
+    scenario 'User_one find nearest friend' do
+      fill_in 'Search user', with: user_one.full_name
+      click_on 'Search'
+      click_on 'Add'
+      find('#log_out').click
+      expect(current_path) == :user_sign_in
+      user_sign_in(user_one)
+      expect(page).to have_content(user_one.full_name)
+      click_on 'Accept'
+      reload_page
+      sleep(5)
+      click_button 'Find nearest friend to you'
+      expect(page).to have_content(user_one.full_name)
+      expect(page).to have_content(user_one.email)
+      expect(page).to have_link('Chat')
+      find('#chat_btn').click
+      expect(current_path) == '/rooms'
+      sleep(5)
+      find('#log_out').click
+    end
+
+    scenario 'User_one send message to user_two' do
+      fill_in 'Search user', with: user_one.full_name
+      click_on 'Search'
+      click_on 'Add'
+      find('#log_out').click
+      expect(current_path) == :user_sign_in
+      user_sign_in(user_one)
+      expect(page).to have_content(user_one.full_name)
+      click_on 'Accept'
+      reload_page
+      sleep(5)
+      find('#chat').click
+      find("#user_#{user_two.id}").click
+      fill_in 'chat-text', with: message
+      click_on 'Send'
+      expect(page).to have_content('less than a minute ago')
+      expect(page).to have_content(message)
+      sleep(5)
+      find('#log_out').click
+      user_sign_in(user_two)
+      sleep(5)
+      find('#chat').click
+      find("#user_#{user_one.id}").click
+      expect(page).to have_content(message)
+    end
+
+    scenario 'User_one add friend from user_two profile' do
+      fill_in 'Search user', with: user_one.full_name
+      click_on 'Search'
+      click_on 'Add'
+      find('#log_out').click
+      expect(current_path) == :user_sign_in
+      user_sign_in(user_one)
+      expect(page).to have_content(user_one.full_name)
+      click_on 'Accept'
+      reload_page
+      sleep(5)
+      user_three = User.create(email: 'boba_biba@gmail.ru', password: 'Nn;kgwJKBmnvsdBHJfs', full_name: 'Egor Biggiba')
+      sleep(5)
+      find('#log_out').click
+      user_sign_in(user_three)
+      fill_in 'Search user', with: user_two.full_name
+      click_on 'Search'
+      click_on 'Add'
+      sleep(5)
+      find('#log_out').click
+      user_sign_in(user_two)
+      click_on 'Accept'
+      sleep(10)
+      find('#log_out').click
+      user_sign_in(user_three)
+      sleep(5)
+      find('#show_profile').click
+      expect(page).to have_content(user_two.full_name)
+      find("#user_#{user_two.id}").click
+      expect(page).to have_content(user_one.full_name)
+      find("#user_#{user_one.id}").click
+      expect(page).to have_button('Add')
+      sleep(20)
+    end
+  end
+end
diff --git a/test/application_system_test_case.rb b/test/application_system_test_case.rb
index d19212a..652febb 100644
--- a/test/application_system_test_case.rb
+++ b/test/application_system_test_case.rb
@@ -1,4 +1,6 @@
-require "test_helper"
+# frozen_string_literal: true
+
+require 'test_helper'
 
 class ApplicationSystemTestCase < ActionDispatch::SystemTestCase
   driven_by :selenium, using: :chrome, screen_size: [1400, 1400]
diff --git a/test/channels/application_cable/connection_test.rb b/test/channels/application_cable/connection_test.rb
index 800405f..4aee9b3 100644
--- a/test/channels/application_cable/connection_test.rb
+++ b/test/channels/application_cable/connection_test.rb
@@ -1,11 +1,15 @@
-require "test_helper"
+# frozen_string_literal: true
 
-class ApplicationCable::ConnectionTest < ActionCable::Connection::TestCase
-  # test "connects with cookies" do
-  #   cookies.signed[:user_id] = 42
-  #
-  #   connect
-  #
-  #   assert_equal connection.user_id, "42"
-  # end
+require 'test_helper'
+
+module ApplicationCable
+  class ConnectionTest < ActionCable::Connection::TestCase
+    # test "connects with cookies" do
+    #   cookies.signed[:user_id] = 42
+    #
+    #   connect
+    #
+    #   assert_equal connection.user_id, "42"
+    # end
+  end
 end
diff --git a/test/controllers/maps_controller_test.rb b/test/controllers/maps_controller_test.rb
index 20d8ca4..1858e6a 100644
--- a/test/controllers/maps_controller_test.rb
+++ b/test/controllers/maps_controller_test.rb
@@ -1,4 +1,6 @@
-require "test_helper"
+# frozen_string_literal: true
+
+require 'test_helper'
 
 class MapsControllerTest < ActionDispatch::IntegrationTest
   # test "the truth" do
diff --git a/test/controllers/rooms_controller_test.rb b/test/controllers/rooms_controller_test.rb
new file mode 100644
index 0000000..18c1c7e
--- /dev/null
+++ b/test/controllers/rooms_controller_test.rb
@@ -0,0 +1,10 @@
+# frozen_string_literal: true
+
+require 'test_helper'
+
+class RoomsControllerTest < ActionDispatch::IntegrationTest
+  test 'should get index' do
+    get rooms_index_url
+    assert_response :success
+  end
+end
diff --git a/test/fixtures/messages.yml b/test/fixtures/messages.yml
new file mode 100644
index 0000000..05b6530
--- /dev/null
+++ b/test/fixtures/messages.yml
@@ -0,0 +1,11 @@
+# Read about fixtures at https://api.rubyonrails.org/classes/ActiveRecord/FixtureSet.html
+
+one:
+  user: one
+  room: one
+  body: MyText
+
+two:
+  user: two
+  room: two
+  body: MyText
diff --git a/test/fixtures/participants.yml b/test/fixtures/participants.yml
new file mode 100644
index 0000000..6af5c7d
--- /dev/null
+++ b/test/fixtures/participants.yml
@@ -0,0 +1,9 @@
+# Read about fixtures at https://api.rubyonrails.org/classes/ActiveRecord/FixtureSet.html
+
+one:
+  user: one
+  room: one
+
+two:
+  user: two
+  room: two
diff --git a/test/fixtures/rooms.yml b/test/fixtures/rooms.yml
new file mode 100644
index 0000000..7d41224
--- /dev/null
+++ b/test/fixtures/rooms.yml
@@ -0,0 +1,7 @@
+# Read about fixtures at https://api.rubyonrails.org/classes/ActiveRecord/FixtureSet.html
+
+one:
+  name: MyString
+
+two:
+  name: MyString
diff --git a/test/fixtures/users.yml b/test/fixtures/users.yml
new file mode 100644
index 0000000..d7a3329
--- /dev/null
+++ b/test/fixtures/users.yml
@@ -0,0 +1,11 @@
+# Read about fixtures at https://api.rubyonrails.org/classes/ActiveRecord/FixtureSet.html
+
+# This model initially had no columns defined. If you add columns to the
+# model remove the "{}" from the fixture names and add the columns immediately
+# below each fixture, per the syntax in the comments below
+#
+one: {}
+# column: value
+#
+two: {}
+# column: value
diff --git a/test/models/message_test.rb b/test/models/message_test.rb
new file mode 100644
index 0000000..f0fcaa8
--- /dev/null
+++ b/test/models/message_test.rb
@@ -0,0 +1,9 @@
+# frozen_string_literal: true
+
+require 'test_helper'
+
+class MessageTest < ActiveSupport::TestCase
+  # test "the truth" do
+  #   assert true
+  # end
+end
diff --git a/test/models/participant_test.rb b/test/models/participant_test.rb
new file mode 100644
index 0000000..f9f4ec7
--- /dev/null
+++ b/test/models/participant_test.rb
@@ -0,0 +1,9 @@
+# frozen_string_literal: true
+
+require 'test_helper'
+
+class ParticipantTest < ActiveSupport::TestCase
+  # test "the truth" do
+  #   assert true
+  # end
+end
diff --git a/test/models/room_test.rb b/test/models/room_test.rb
new file mode 100644
index 0000000..0226823
--- /dev/null
+++ b/test/models/room_test.rb
@@ -0,0 +1,9 @@
+# frozen_string_literal: true
+
+require 'test_helper'
+
+class RoomTest < ActiveSupport::TestCase
+  # test "the truth" do
+  #   assert true
+  # end
+end
diff --git a/test/models/user_test.rb b/test/models/user_test.rb
new file mode 100644
index 0000000..5cc44ed
--- /dev/null
+++ b/test/models/user_test.rb
@@ -0,0 +1,9 @@
+# frozen_string_literal: true
+
+require 'test_helper'
+
+class UserTest < ActiveSupport::TestCase
+  # test "the truth" do
+  #   assert true
+  # end
+end
diff --git a/test/test_helper.rb b/test/test_helper.rb
index d713e37..0c92e8e 100644
--- a/test/test_helper.rb
+++ b/test/test_helper.rb
@@ -1,13 +1,17 @@
-ENV["RAILS_ENV"] ||= "test"
-require_relative "../config/environment"
-require "rails/test_help"
+# frozen_string_literal: true
 
-class ActiveSupport::TestCase
-  # Run tests in parallel with specified workers
-  parallelize(workers: :number_of_processors)
+ENV['RAILS_ENV'] ||= 'test'
+require_relative '../config/environment'
+require 'rails/test_help'
 
-  # Setup all fixtures in test/fixtures/*.yml for all tests in alphabetical order.
-  fixtures :all
+module ActiveSupport
+  class TestCase
+    # Run tests in parallel with specified workers
+    parallelize(workers: :number_of_processors)
 
-  # Add more helper methods to be used by all tests here...
+    # Setup all fixtures in test/fixtures/*.yml for all tests in alphabetical order.
+    fixtures :all
+
+    # Add more helper methods to be used by all tests here...
+  end
 end
